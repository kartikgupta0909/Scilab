type token =
  | IDENT of (string)
  | END_IDENT of (string)
  | UNSIGNED_INTEGER of (string)
  | UNSIGNED_REAL of (string)
  | STRING of (string)
  | ALGORITHM
  | AND
  | ANNOTATION
  | BLOCK
  | BREAK
  | CLASS
  | CONNECT
  | CONNECTOR
  | CONSTANT
  | DISCRETE
  | EACH
  | ELSE
  | ELSEIF
  | ELSEWHEN
  | ENCAPSULATED
  | END
  | END_IF
  | END_FOR
  | END_WHEN
  | END_WHILE
  | ENUMERATION
  | EQUATION
  | EXPANDABLE
  | EXTENDS
  | EXTERNAL
  | FALSE
  | FINAL
  | FLOW
  | FOR
  | FUNCTION
  | IF
  | IMPORT
  | IN
  | INITIAL_ALGORITHM
  | INITIAL_EQUATION
  | INNER
  | INPUT
  | LOOP
  | MODEL
  | NOT
  | NOEVENT
  | OR
  | OUTER
  | OUTPUT
  | PACKAGE
  | PARAMETER
  | PARTIAL
  | PROTECTED
  | PUBLIC
  | RECORD
  | REDECLARE
  | REPLACEABLE
  | RESTRICTS
  | RETURN
  | THEN
  | TRUE
  | TYPE
  | WHEN
  | WHILE
  | WITHIN
  | LP
  | RP
  | LSB
  | RSB
  | LCB
  | RCB
  | DOT
  | CM
  | SC
  | CL
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EXP
  | EQ
  | COLEQ
  | LT
  | GT
  | LE
  | GE
  | EE
  | NE
  | EOF

open Parsing;;
# 31 "src/translator/parsing/parser.mly"

(** Modelica parser. *)

(** Implementation based on {i Modelica language specification 2.0 } *)

open Syntax

exception Unclosed of int * string * int * string
exception Invalid_matrix of int * int
exception Invalid_array of int * int
exception End_of_file

type location =
  {
    start: int; (* offset in the parsed stream *)
    enddd: int;  (* offset in the parsed stream *)
    filename: filename
  }

and filename =
  | LibraryFile of string
  | CommandLine

type error_description =
  {
    err_msg: string list;
    err_info: (string * string) list;
    err_ctx: err_ctx
  }

and err_ctx =
  {
    location: location;
  }

exception SyntacticError of error_description

let inputfile = ref CommandLine

let node nature =
  {
    nature = nature;
    info = { start = Parsing.symbol_start ();
             enddd = Parsing.symbol_end ();
             filename = !inputfile }
  }

let rhs_nodes n n' nature =
  {
    nature = nature;
    info = { start = Parsing.rhs_start n;
             enddd = Parsing.rhs_end n';
             filename = !inputfile }
  }

let unclosed opening_symbol opening_pos closing_symbol closing_pos =
  let offset = Parsing.rhs_start opening_pos
  and offset' = Parsing.rhs_start closing_pos in
  raise (Unclosed (offset, opening_symbol, offset', closing_symbol))

let invalid_matrix_construction opening_pos error_pos =
  raise (Invalid_matrix (
    Parsing.rhs_start opening_pos, Parsing.rhs_start error_pos))

let invalid_literal_array_construction opening_pos error_pos =
  raise (Invalid_array (
    Parsing.rhs_start opening_pos, Parsing.rhs_start error_pos))

# 163 "src/translator/parsing/parser.ml"
let yytransl_const = [|
  262 (* ALGORITHM *);
  263 (* AND *);
  264 (* ANNOTATION *);
  265 (* BLOCK *);
  266 (* BREAK *);
  267 (* CLASS *);
  268 (* CONNECT *);
  269 (* CONNECTOR *);
  270 (* CONSTANT *);
  271 (* DISCRETE *);
  272 (* EACH *);
  273 (* ELSE *);
  274 (* ELSEIF *);
  275 (* ELSEWHEN *);
  276 (* ENCAPSULATED *);
  277 (* END *);
  278 (* END_IF *);
  279 (* END_FOR *);
  280 (* END_WHEN *);
  281 (* END_WHILE *);
  282 (* ENUMERATION *);
  283 (* EQUATION *);
  284 (* EXPANDABLE *);
  285 (* EXTENDS *);
  286 (* EXTERNAL *);
  287 (* FALSE *);
  288 (* FINAL *);
  289 (* FLOW *);
  290 (* FOR *);
  291 (* FUNCTION *);
  292 (* IF *);
  293 (* IMPORT *);
  294 (* IN *);
  295 (* INITIAL_ALGORITHM *);
  296 (* INITIAL_EQUATION *);
  297 (* INNER *);
  298 (* INPUT *);
  299 (* LOOP *);
  300 (* MODEL *);
  301 (* NOT *);
  302 (* NOEVENT *);
  303 (* OR *);
  304 (* OUTER *);
  305 (* OUTPUT *);
  306 (* PACKAGE *);
  307 (* PARAMETER *);
  308 (* PARTIAL *);
  309 (* PROTECTED *);
  310 (* PUBLIC *);
  311 (* RECORD *);
  312 (* REDECLARE *);
  313 (* REPLACEABLE *);
  314 (* RESTRICTS *);
  315 (* RETURN *);
  316 (* THEN *);
  317 (* TRUE *);
  318 (* TYPE *);
  319 (* WHEN *);
  320 (* WHILE *);
  321 (* WITHIN *);
  322 (* LP *);
  323 (* RP *);
  324 (* LSB *);
  325 (* RSB *);
  326 (* LCB *);
  327 (* RCB *);
  328 (* DOT *);
  329 (* CM *);
  330 (* SC *);
  331 (* CL *);
  332 (* PLUS *);
  333 (* MINUS *);
  334 (* STAR *);
  335 (* SLASH *);
  336 (* EXP *);
  337 (* EQ *);
  338 (* COLEQ *);
  339 (* LT *);
  340 (* GT *);
  341 (* LE *);
  342 (* GE *);
  343 (* EE *);
  344 (* NE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* END_IDENT *);
  259 (* UNSIGNED_INTEGER *);
  260 (* UNSIGNED_REAL *);
  261 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\002\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\006\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\016\000\016\000\017\000\017\000\019\000\
\019\000\019\000\019\000\019\000\022\000\027\000\027\000\029\000\
\029\000\030\000\030\000\031\000\021\000\021\000\032\000\032\000\
\032\000\032\000\032\000\033\000\033\000\033\000\041\000\041\000\
\039\000\039\000\037\000\037\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\042\000\042\000\024\000\
\024\000\025\000\025\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\049\000\049\000\049\000\049\000\049\000\049\000\
\046\000\046\000\047\000\047\000\048\000\048\000\048\000\048\000\
\005\000\005\000\005\000\051\000\051\000\045\000\052\000\052\000\
\050\000\028\000\054\000\054\000\055\000\055\000\055\000\055\000\
\056\000\056\000\056\000\053\000\009\000\009\000\057\000\058\000\
\059\000\059\000\060\000\060\000\060\000\060\000\044\000\044\000\
\044\000\044\000\061\000\061\000\062\000\062\000\063\000\065\000\
\065\000\064\000\066\000\066\000\066\000\066\000\066\000\066\000\
\035\000\035\000\035\000\035\000\067\000\067\000\036\000\036\000\
\036\000\036\000\069\000\069\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\072\000\077\000\077\000\078\000\078\000\076\000\
\076\000\012\000\080\000\080\000\081\000\081\000\079\000\079\000\
\073\000\013\000\082\000\082\000\083\000\083\000\014\000\075\000\
\015\000\084\000\084\000\085\000\085\000\074\000\074\000\007\000\
\007\000\086\000\086\000\071\000\071\000\071\000\087\000\087\000\
\088\000\088\000\089\000\089\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\091\000\091\000\091\000\092\000\092\000\
\092\000\093\000\093\000\093\000\094\000\094\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\096\000\096\000\097\000\097\000\023\000\023\000\008\000\008\000\
\008\000\008\000\011\000\011\000\098\000\098\000\098\000\098\000\
\099\000\099\000\099\000\099\000\099\000\099\000\010\000\010\000\
\043\000\100\000\100\000\101\000\101\000\026\000\020\000\020\000\
\102\000\102\000\040\000\000\000"

let yylen = "\002\000\
\001\000\002\000\002\000\003\000\002\000\001\000\003\000\002\000\
\004\000\003\000\001\000\002\000\003\000\007\000\008\000\008\000\
\007\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\004\000\001\000\001\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\000\000\001\000\000\000\001\000\004\000\
\007\000\007\000\006\000\006\000\001\000\000\000\001\000\001\000\
\001\000\001\000\003\000\002\000\002\000\003\000\000\000\003\000\
\003\000\002\000\002\000\000\000\005\000\006\000\000\000\001\000\
\000\000\002\000\000\000\001\000\000\000\003\000\004\000\004\000\
\003\000\005\000\006\000\006\000\005\000\001\000\003\000\000\000\
\001\000\000\000\001\000\002\000\003\000\003\000\006\000\004\000\
\004\000\007\000\001\000\001\000\002\000\003\000\002\000\003\000\
\000\000\001\000\000\000\001\000\000\000\001\000\001\000\002\000\
\005\000\003\000\005\000\001\000\002\000\004\000\004\000\004\000\
\004\000\003\000\000\000\001\000\000\000\001\000\001\000\001\000\
\000\000\001\000\001\000\001\000\001\000\003\000\002\000\003\000\
\000\000\001\000\003\000\001\000\002\000\002\000\002\000\003\000\
\003\000\002\000\001\000\003\000\001\000\001\000\005\000\000\000\
\001\000\004\000\001\000\003\000\002\000\003\000\004\000\005\000\
\001\000\002\000\001\000\002\000\004\000\005\000\001\000\002\000\
\001\000\002\000\004\000\005\000\003\000\001\000\001\000\001\000\
\001\000\003\000\004\000\004\000\003\000\003\000\003\000\004\000\
\004\000\003\000\007\000\006\000\008\000\007\000\008\000\007\000\
\007\000\006\000\003\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\007\000\000\000\005\000\000\000\002\000\002\000\
\003\000\007\000\000\000\005\000\000\000\002\000\002\000\003\000\
\005\000\005\000\001\000\003\000\001\000\003\000\005\000\006\000\
\006\000\000\000\005\000\000\000\005\000\006\000\006\000\001\000\
\007\000\000\000\005\000\001\000\003\000\005\000\001\000\003\000\
\001\000\003\000\001\000\002\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\002\000\002\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\004\000\001\000\003\000\004\000\004\000\
\003\000\003\000\003\000\003\000\002\000\003\000\002\000\001\000\
\001\000\003\000\003\000\001\000\001\000\003\000\001\000\002\000\
\003\000\004\000\001\000\003\000\001\000\001\000\003\000\003\000\
\003\000\002\000\004\000\005\000\005\000\004\000\001\000\003\000\
\003\000\001\000\003\000\001\000\001\000\002\000\000\000\001\000\
\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\255\000\000\001\001\001\018\000\037\000\
\016\001\002\001\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\003\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\052\001\000\000\000\000\000\000\000\000\
\011\000\000\000\020\000\021\000\022\000\023\000\000\000\224\000\
\000\000\000\000\233\000\235\000\000\000\000\000\247\000\000\000\
\253\000\000\000\024\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\236\000\000\000\000\000\
\000\000\024\000\003\000\000\000\000\000\000\000\013\001\000\000\
\000\000\015\001\000\000\020\001\000\000\251\000\252\000\000\000\
\000\000\002\000\005\000\008\000\000\000\000\000\000\000\000\000\
\000\000\125\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\001\045\001\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\001\
\000\000\000\000\106\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\011\001\000\000\000\000\012\001\000\000\014\001\
\000\000\010\000\000\000\081\000\009\001\000\000\000\000\006\001\
\000\000\000\000\000\000\030\001\000\000\013\000\000\000\127\000\
\029\000\027\000\032\000\000\000\035\000\028\000\034\000\030\000\
\033\000\000\000\000\000\000\000\234\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\248\000\249\000\254\000\
\041\001\000\000\214\000\189\000\000\000\190\000\000\000\000\000\
\191\000\192\000\193\000\194\000\000\000\000\000\212\000\000\000\
\010\001\000\000\000\000\000\000\000\000\021\001\000\000\022\001\
\000\000\000\000\064\000\046\001\000\000\004\001\000\000\000\000\
\025\000\040\001\000\000\018\001\019\001\009\000\000\000\000\000\
\000\000\000\000\128\000\130\000\000\000\000\000\000\000\008\001\
\007\001\000\000\026\001\126\000\031\000\000\000\000\000\026\000\
\000\000\043\001\000\000\188\000\000\000\000\000\000\000\000\000\
\207\000\210\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\105\000\107\000\051\001\050\001\000\000\000\000\
\215\000\000\000\138\000\145\000\000\000\135\000\000\000\000\000\
\141\000\142\000\000\000\133\000\134\000\000\000\033\001\000\000\
\028\001\031\001\032\001\000\000\000\000\000\000\000\000\000\000\
\000\000\187\000\000\000\178\000\175\000\000\000\174\000\208\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\217\000\000\000\000\000\137\000\136\000\
\000\000\100\000\000\000\131\000\038\001\035\001\000\000\000\000\
\116\000\000\000\045\000\000\000\000\000\098\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\083\000\000\000\
\000\000\177\000\176\000\000\000\225\000\000\000\000\000\000\000\
\000\000\202\000\000\000\017\000\014\000\000\000\000\000\140\000\
\000\000\037\001\036\001\000\000\000\000\120\000\118\000\119\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\058\000\059\000\000\000\000\000\
\000\000\000\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\015\000\000\000\147\000\000\000\
\146\000\000\000\000\000\049\000\000\000\047\000\000\000\050\000\
\000\000\122\000\123\000\114\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\166\000\167\000\168\000\169\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\086\000\
\000\000\103\000\000\000\000\000\186\000\180\000\000\000\000\000\
\227\000\204\000\221\000\000\000\000\000\000\000\000\000\143\000\
\052\000\043\000\000\000\000\000\000\000\110\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\088\000\089\000\000\000\104\000\
\000\000\091\000\000\000\000\000\092\000\044\000\184\000\182\000\
\185\000\179\000\000\000\000\000\000\000\000\000\108\000\000\000\
\148\000\042\000\051\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\165\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\183\000\181\000\000\000\000\000\109\000\000\000\000\000\
\163\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\157\000\073\000\070\000\000\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\087\000\000\000\000\000\
\000\000\164\000\000\000\200\000\209\000\000\000\000\000\000\000\
\000\000\000\000\158\000\000\000\072\000\071\000\000\000\062\000\
\090\000\000\000\111\000\112\000\223\000\222\000\201\000\000\000\
\000\000\000\000\000\000\216\000\079\000\077\000\074\000\000\000\
\000\000\000\000\195\000\000\000\076\000\075\000\000\000\000\000\
\197\000\219\000"

let yydgoto = "\002\000\
\028\000\029\000\030\000\068\000\063\001\210\001\145\000\059\000\
\089\000\072\000\146\000\185\000\186\000\187\000\188\000\039\000\
\093\000\162\000\232\000\122\000\064\001\058\001\182\001\139\000\
\070\001\123\000\133\001\211\001\134\001\135\001\136\001\065\001\
\108\001\066\001\109\001\110\001\159\001\204\001\142\001\143\001\
\204\000\014\002\051\000\071\001\068\001\069\001\051\001\171\001\
\212\001\213\001\222\001\223\001\183\001\060\001\097\001\140\001\
\090\000\091\000\219\000\220\000\007\001\008\001\009\001\010\001\
\011\001\129\001\151\001\003\002\144\001\189\000\040\000\154\001\
\155\001\156\001\157\001\004\002\032\002\050\002\197\000\249\000\
\042\001\054\000\055\000\034\002\000\001\246\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\073\000\
\077\000\147\000\148\000\110\000\111\000\124\000"

let yysindex = "\040\000\
\208\000\000\000\247\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\101\255\191\255\052\003\013\000\115\000\254\255\
\000\000\000\000\052\003\052\003\050\255\052\003\230\008\012\009\
\115\000\115\000\000\000\000\000\020\255\093\255\019\000\033\000\
\000\000\025\255\000\000\000\000\000\000\000\000\110\000\000\000\
\196\255\232\255\000\000\000\000\228\001\102\255\000\000\068\000\
\000\000\219\002\000\000\162\000\146\000\147\000\165\000\052\003\
\052\003\188\000\072\000\184\000\061\255\000\000\052\003\206\000\
\225\000\000\000\000\000\083\255\197\000\092\255\000\000\212\000\
\213\000\000\000\235\255\000\000\216\000\000\000\000\000\101\255\
\215\000\000\000\000\000\000\000\247\254\116\007\038\001\052\003\
\223\000\000\000\037\001\000\000\219\006\078\010\078\010\078\010\
\115\000\115\000\115\000\115\000\115\000\115\000\115\000\115\000\
\115\000\115\000\232\002\000\000\000\000\230\000\229\000\000\000\
\052\003\152\002\191\255\243\000\099\255\114\009\054\001\000\000\
\022\255\052\001\000\000\245\000\255\000\152\002\152\002\068\001\
\000\000\052\003\000\000\244\000\052\003\000\000\191\255\000\000\
\254\000\000\000\116\000\000\000\000\000\208\255\072\001\000\000\
\040\001\110\255\002\001\000\000\247\254\000\000\075\001\000\000\
\000\000\000\000\000\000\071\001\000\000\000\000\000\000\000\000\
\000\000\073\255\232\255\058\000\000\000\102\255\102\255\126\000\
\126\000\126\000\126\000\126\000\126\000\000\000\000\000\000\000\
\000\000\219\002\000\000\000\000\052\003\000\000\132\008\148\000\
\000\000\000\000\000\000\000\000\007\001\109\003\000\000\052\003\
\000\000\132\008\076\001\211\000\009\002\000\000\153\255\000\000\
\037\001\029\001\000\000\000\000\091\001\000\000\111\004\202\004\
\000\000\000\000\099\001\000\000\000\000\000\000\002\000\052\003\
\052\003\020\001\000\000\000\000\052\003\039\001\191\255\000\000\
\000\000\042\010\000\000\000\000\000\000\027\255\103\001\000\000\
\078\010\000\000\046\001\000\000\025\001\175\255\128\007\052\003\
\000\000\000\000\035\001\187\255\052\003\093\001\166\007\052\003\
\100\001\114\001\000\000\000\000\000\000\000\000\052\003\092\001\
\000\000\128\000\000\000\000\000\102\001\000\000\223\255\050\001\
\000\000\000\000\094\001\000\000\000\000\052\003\000\000\214\007\
\000\000\000\000\000\000\052\255\159\000\029\001\077\001\152\002\
\099\001\000\000\043\001\000\000\000\000\228\255\000\000\000\000\
\000\000\043\001\067\001\052\003\000\000\000\000\017\000\069\001\
\152\002\116\001\079\001\000\000\252\007\094\001\000\000\000\000\
\026\255\000\000\099\001\000\000\000\000\000\000\028\000\078\001\
\000\000\054\001\000\000\077\000\054\001\000\000\074\001\139\001\
\171\001\118\000\104\001\106\001\094\001\037\001\000\000\133\000\
\099\001\000\000\000\000\052\003\000\000\000\000\000\000\152\002\
\152\002\000\000\152\002\000\000\000\000\030\000\092\000\000\000\
\209\000\000\000\000\000\034\255\151\000\000\000\000\000\000\000\
\034\000\175\000\052\001\000\000\152\002\030\010\137\001\152\002\
\030\010\159\000\159\000\000\000\000\000\000\000\115\001\171\001\
\119\001\094\001\000\000\052\001\069\000\159\000\008\008\177\000\
\076\001\009\002\111\004\000\000\000\000\244\255\000\000\054\001\
\000\000\037\001\037\001\000\000\031\000\000\000\073\001\000\000\
\029\001\000\000\000\000\000\000\052\001\000\000\120\001\152\002\
\037\001\084\001\191\255\052\003\052\003\190\000\030\010\037\001\
\095\001\000\000\000\000\000\000\000\000\000\000\152\001\152\002\
\030\010\118\000\118\000\052\001\000\000\052\001\069\000\000\000\
\107\001\000\000\132\000\188\001\000\000\000\000\032\000\046\008\
\000\000\000\000\000\000\203\255\054\001\123\001\075\001\000\000\
\000\000\000\000\037\001\195\001\037\001\000\000\000\000\037\001\
\125\001\099\001\154\001\140\001\142\001\094\008\037\001\130\001\
\052\003\200\255\096\000\104\255\000\000\000\000\132\000\000\000\
\244\255\000\000\054\001\131\001\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\054\001\054\001\203\255\000\000\075\001\
\000\000\000\000\000\000\000\000\132\001\052\001\154\000\030\010\
\030\010\030\010\000\000\000\000\057\000\133\001\052\001\000\000\
\144\008\208\001\052\001\138\001\144\001\203\255\203\255\247\254\
\052\001\000\000\000\000\175\000\175\000\000\000\203\255\052\001\
\000\000\099\001\145\001\162\009\200\009\248\009\000\000\000\000\
\052\001\000\000\000\000\000\000\141\001\059\000\147\001\000\000\
\052\001\052\001\203\255\203\255\075\001\000\000\037\001\037\001\
\203\255\000\000\096\255\000\000\000\000\148\001\052\003\199\001\
\052\003\202\001\000\000\052\003\000\000\000\000\182\008\000\000\
\000\000\223\000\000\000\000\000\000\000\000\000\000\000\167\001\
\030\010\206\001\169\001\000\000\000\000\000\000\000\000\063\000\
\030\010\030\010\000\000\030\010\000\000\000\000\200\009\248\009\
\000\000\000\000"

let yyrindex = "\000\000\
\083\005\000\000\085\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\005\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\000\000\032\002\000\000\000\000\000\000\000\000\008\007\000\000\
\145\006\126\005\000\000\000\000\090\004\185\002\000\000\096\002\
\000\000\000\000\000\000\000\000\017\255\000\000\042\000\000\000\
\000\000\000\000\007\002\219\255\163\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\255\000\000\000\000\161\001\
\000\000\000\000\160\001\000\000\000\000\000\000\000\000\083\005\
\000\000\000\000\000\000\000\000\236\255\000\000\000\000\000\000\
\159\001\000\000\024\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\168\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\127\255\000\000\150\010\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\121\002\000\000\000\000\000\000\000\000\
\000\000\000\000\144\255\000\000\000\000\130\003\000\000\000\000\
\047\255\000\000\065\000\000\000\174\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\198\005\164\006\000\000\018\003\107\003\109\004\
\181\004\200\004\016\005\035\005\107\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\218\001\173\006\173\255\000\000\163\255\000\000\
\163\255\000\000\000\000\000\000\000\000\000\000\212\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\183\255\000\000\
\000\000\250\000\000\000\000\000\000\000\087\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\075\011\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\216\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\172\012\000\000\000\000\070\000\
\000\000\000\000\238\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\098\001\189\011\018\011\006\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\206\005\013\007\000\000\000\000\221\005\014\006\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\197\012\000\000\000\000\
\183\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\000\000\000\000\
\240\001\189\011\000\000\000\000\127\012\075\011\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\006\056\006\000\000\
\242\001\000\000\000\000\000\000\000\000\000\000\056\013\000\000\
\038\255\000\000\000\000\075\000\106\000\000\000\000\000\000\000\
\008\002\166\255\132\011\000\000\081\001\218\003\072\255\181\005\
\146\006\102\012\102\012\000\000\000\000\000\000\000\000\240\001\
\000\000\127\012\000\000\132\011\242\012\189\011\000\000\000\000\
\218\001\173\255\212\001\000\000\000\000\056\013\000\000\000\000\
\000\000\103\255\075\255\000\000\000\000\000\000\090\000\000\000\
\215\001\000\000\000\000\000\000\193\001\000\000\000\000\240\008\
\163\255\000\000\000\000\000\000\000\000\027\007\102\009\163\255\
\000\000\000\000\000\000\000\000\000\000\000\000\204\255\224\010\
\048\013\246\011\047\012\132\011\000\000\132\011\242\012\000\000\
\011\013\000\000\056\013\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\147\255\000\000\095\000\000\000\000\000\
\000\000\000\000\024\001\000\000\024\001\000\000\000\000\163\255\
\000\000\000\000\000\000\000\000\000\000\000\000\163\255\000\000\
\000\000\114\000\000\000\000\000\000\000\000\000\056\013\000\000\
\056\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\179\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\208\010\000\000\000\000\
\000\000\000\000\151\003\214\003\000\000\000\000\060\009\000\000\
\000\000\000\000\011\002\000\000\000\000\198\001\200\001\019\002\
\132\011\000\000\000\000\215\001\215\001\000\000\182\255\208\010\
\000\000\000\000\000\000\000\000\134\000\253\001\235\003\001\004\
\060\009\000\000\000\000\000\000\102\000\000\000\000\000\000\000\
\011\002\132\011\204\001\205\001\000\000\000\000\024\001\024\001\
\238\255\000\000\000\000\000\000\000\000\000\000\000\000\006\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\002\000\000\000\000\000\000\000\000\134\000\253\001\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\008\000\001\000\005\000\255\255\
\008\001\015\000\053\255\029\003\030\003\034\003\036\003\000\000\
\000\000\000\000\000\000\031\255\176\001\000\000\243\255\177\254\
\168\254\198\255\000\000\002\255\000\000\000\000\108\001\232\001\
\190\001\145\000\000\000\000\000\000\000\000\000\071\000\141\255\
\162\001\165\255\174\255\130\255\209\254\224\254\008\255\150\001\
\101\001\109\001\226\255\120\255\131\254\000\000\000\000\000\000\
\109\255\000\000\211\001\000\000\002\002\000\000\000\000\000\000\
\048\002\000\000\214\001\199\254\221\001\112\255\073\000\000\000\
\000\000\000\000\000\000\080\254\001\001\000\000\150\255\223\001\
\000\000\152\255\000\000\006\001\210\001\201\001\176\255\233\002\
\001\003\083\003\084\002\166\001\045\000\000\000\248\002\223\002\
\000\000\000\000\132\002\183\002\000\000\000\000"

let yytablesize = 3702
let yytable = "\034\000\
\061\000\032\000\140\000\228\000\021\001\033\000\203\000\190\000\
\031\000\141\001\191\000\052\000\218\000\137\001\164\000\001\000\
\213\000\058\000\113\001\207\000\208\000\059\001\200\000\064\000\
\065\000\085\000\069\000\069\000\075\000\081\000\213\000\120\000\
\152\000\114\001\131\001\030\001\070\000\129\000\076\000\008\000\
\001\000\004\001\129\000\039\001\152\001\243\000\029\001\152\001\
\189\001\113\000\066\000\080\000\243\000\087\001\109\000\224\001\
\005\002\006\002\050\000\213\000\116\000\069\000\243\000\243\000\
\039\001\120\000\227\000\125\000\055\001\078\000\079\000\117\000\
\067\000\230\000\047\001\253\000\117\001\056\001\113\000\067\000\
\137\000\005\001\047\001\213\000\057\001\248\001\034\001\213\000\
\128\001\213\000\086\000\131\000\150\000\199\001\113\000\045\002\
\087\000\086\001\131\000\201\000\118\001\231\000\047\001\199\001\
\129\000\199\000\088\000\020\001\132\001\224\000\129\000\202\000\
\184\000\029\001\113\001\113\001\196\000\179\000\017\001\029\001\
\008\000\167\001\195\000\067\000\184\000\184\000\063\000\181\001\
\058\002\114\001\114\001\039\001\121\000\039\001\069\000\039\001\
\063\002\069\000\039\001\064\002\251\000\047\001\252\000\129\000\
\210\000\067\000\149\000\047\001\129\000\174\000\175\000\129\000\
\023\001\034\001\128\000\063\000\129\000\120\000\132\000\034\001\
\184\001\067\001\046\002\023\002\024\002\193\000\082\000\087\000\
\021\002\047\001\047\001\175\001\129\000\082\000\026\001\047\001\
\225\000\243\001\150\000\105\000\106\000\151\000\109\000\144\000\
\063\000\235\000\033\001\069\000\184\000\203\000\081\001\053\000\
\243\000\063\000\203\000\184\000\195\000\238\000\069\000\063\000\
\063\000\129\000\030\002\030\002\030\002\184\000\184\000\027\000\
\244\000\002\001\129\000\069\000\145\001\149\000\144\000\145\001\
\129\000\129\000\218\000\149\000\012\001\013\001\047\001\021\001\
\250\000\015\001\021\001\074\001\219\001\122\001\018\001\220\001\
\123\001\243\000\243\000\080\000\047\001\152\000\096\000\082\000\
\080\000\027\001\094\000\080\000\031\001\150\000\067\001\067\001\
\151\000\035\001\237\001\150\000\040\001\034\001\151\000\192\001\
\030\002\003\001\067\001\043\001\221\001\030\002\030\002\008\000\
\080\000\241\001\140\000\050\000\135\000\060\000\095\000\192\001\
\078\001\004\001\052\001\050\000\057\001\069\000\184\000\072\001\
\036\000\203\000\036\000\090\001\036\000\124\001\186\001\215\001\
\221\000\048\001\021\001\225\001\021\001\080\000\075\001\184\000\
\077\001\211\000\195\001\036\000\093\001\080\000\080\000\098\001\
\152\000\089\001\036\000\130\000\080\000\080\000\152\000\250\001\
\007\002\005\001\037\002\036\000\080\000\080\000\061\002\063\000\
\027\001\036\000\117\000\036\000\006\001\139\000\036\000\120\001\
\185\001\111\001\046\000\138\001\255\001\036\000\184\000\184\000\
\121\001\184\000\139\001\079\001\211\000\254\001\193\001\127\001\
\244\001\048\000\094\001\095\001\083\000\200\001\091\001\124\000\
\125\001\187\001\216\001\184\000\150\001\078\000\184\000\150\001\
\094\000\080\000\084\000\117\000\211\000\169\001\080\000\008\000\
\211\000\080\000\117\000\003\000\170\001\004\000\005\000\006\000\
\184\000\184\000\251\001\008\002\057\001\038\002\180\001\096\001\
\226\001\062\002\228\001\027\001\233\000\229\001\080\000\009\000\
\139\000\086\000\254\001\254\001\238\001\046\000\184\000\087\000\
\254\001\010\000\061\001\107\000\126\001\150\001\196\000\008\000\
\196\001\197\001\014\000\196\000\048\000\203\001\184\000\150\001\
\016\000\092\000\124\000\080\000\057\001\140\000\202\000\087\000\
\078\000\111\001\111\001\080\000\080\000\062\001\153\001\018\000\
\242\001\153\001\080\000\080\000\057\000\215\000\023\000\113\000\
\024\000\023\001\168\001\061\001\209\001\114\000\025\000\026\000\
\231\001\045\001\023\001\014\000\216\000\217\000\119\001\087\000\
\053\002\097\000\098\000\056\002\087\000\240\001\252\001\253\001\
\003\000\246\001\004\000\005\000\006\000\239\000\062\001\019\002\
\020\002\007\000\050\000\087\000\043\002\044\002\250\000\153\001\
\025\002\087\000\002\002\008\000\009\000\240\000\150\001\150\001\
\150\001\153\001\205\001\112\000\206\001\115\000\010\000\011\000\
\215\000\012\000\176\001\013\000\014\000\013\002\250\000\118\000\
\087\000\132\000\162\001\163\001\015\000\016\000\132\000\198\001\
\027\002\132\000\150\001\150\001\150\001\087\000\166\000\167\000\
\119\000\126\000\017\000\127\000\018\000\130\000\019\000\020\000\
\021\000\022\000\215\000\023\000\247\000\024\000\132\000\047\001\
\087\000\134\000\087\000\025\000\026\000\133\000\136\000\047\001\
\138\000\216\000\217\000\048\002\240\000\051\002\149\000\151\000\
\013\002\120\000\177\000\013\002\001\002\178\000\192\000\150\001\
\153\001\153\001\153\001\132\000\047\001\010\002\198\000\150\001\
\150\001\016\002\150\001\202\000\132\000\150\001\150\001\022\002\
\205\000\206\000\132\000\132\000\209\000\211\000\026\002\214\000\
\222\000\223\000\226\000\085\000\153\001\153\001\153\001\035\002\
\241\000\047\001\161\000\229\000\023\001\023\001\161\000\040\002\
\041\002\023\001\047\001\023\001\023\001\245\000\215\000\254\000\
\047\001\047\001\115\000\003\000\014\001\023\001\023\001\022\001\
\016\001\024\001\025\001\161\000\032\001\036\001\161\000\115\000\
\115\000\023\001\200\000\044\001\041\001\004\001\023\001\161\000\
\161\000\153\001\049\001\094\000\073\001\050\001\076\001\023\001\
\080\001\153\001\153\001\023\001\153\001\161\000\161\000\153\001\
\153\001\082\001\083\001\115\000\100\001\158\001\023\001\092\001\
\023\001\188\001\115\000\099\001\115\000\194\001\023\001\023\001\
\202\001\023\001\208\001\023\001\023\001\023\001\023\001\023\001\
\023\001\023\001\023\001\023\001\023\001\023\001\023\001\023\001\
\023\001\023\001\023\001\023\001\023\001\025\001\025\001\201\001\
\101\001\115\001\025\001\116\001\025\001\025\001\168\000\169\000\
\170\000\171\000\172\000\173\000\164\001\214\001\025\001\025\001\
\166\001\191\001\250\000\131\001\232\001\102\001\230\001\233\001\
\103\001\234\001\025\001\239\001\249\001\000\002\009\002\025\001\
\015\002\104\001\105\001\017\002\039\002\036\002\082\000\049\002\
\025\001\018\002\028\002\082\000\025\001\047\002\082\000\106\001\
\107\001\052\002\057\002\059\002\060\002\017\001\039\001\025\001\
\012\000\025\001\226\000\220\000\042\001\205\000\099\000\025\001\
\025\001\060\000\025\001\082\000\025\001\025\001\025\001\025\001\
\025\001\025\001\025\001\025\001\025\001\025\001\025\001\025\001\
\025\001\025\001\025\001\025\001\025\001\025\001\005\001\206\000\
\121\000\003\000\063\000\005\001\065\000\005\001\005\001\093\000\
\082\000\095\000\180\000\080\000\218\000\094\000\096\000\005\001\
\005\001\082\000\248\000\198\000\042\002\035\000\036\000\082\000\
\082\000\199\000\037\000\005\001\038\000\172\001\005\001\227\001\
\005\001\112\001\012\000\130\001\181\000\165\001\190\001\097\000\
\098\000\005\001\088\001\245\001\046\001\005\001\099\000\100\000\
\101\000\102\000\103\000\104\000\207\001\247\001\161\001\065\002\
\005\001\177\001\005\001\182\000\160\001\066\002\163\000\019\000\
\020\000\005\001\183\000\005\001\179\001\005\001\005\001\005\001\
\005\001\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\178\001\005\001\005\001\005\001\005\001\005\001\005\001\250\000\
\165\000\062\000\176\000\212\000\250\000\019\001\250\000\250\000\
\234\000\005\001\005\001\005\001\005\001\005\001\005\001\005\001\
\250\000\250\000\005\001\005\001\005\001\005\001\005\001\005\001\
\000\000\000\000\000\000\000\000\250\000\000\000\000\000\010\001\
\000\000\250\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\250\000\000\000\000\000\000\000\250\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\250\000\000\000\250\000\000\000\000\000\000\000\000\000\
\000\000\180\000\250\000\000\000\250\000\000\000\250\000\010\001\
\250\000\250\000\250\000\250\000\250\000\250\000\250\000\000\000\
\250\000\000\000\250\000\250\000\250\000\250\000\250\000\250\000\
\244\000\012\000\000\000\181\000\000\000\244\000\000\000\244\000\
\244\000\000\000\010\001\010\001\010\001\010\001\010\001\010\001\
\010\001\244\000\244\000\010\001\010\001\010\001\010\001\010\001\
\010\001\000\000\182\000\000\000\000\000\244\000\019\000\020\000\
\000\000\183\000\244\000\003\000\000\000\004\000\005\000\006\000\
\000\000\000\000\000\000\244\000\000\000\000\000\000\000\244\000\
\003\000\000\000\004\000\005\000\006\000\000\000\000\000\009\000\
\000\000\000\000\244\000\000\000\244\000\000\000\000\000\000\000\
\000\000\010\000\000\000\244\000\009\000\244\000\056\000\244\000\
\000\000\244\000\244\000\244\000\244\000\244\000\010\000\015\000\
\016\000\244\000\000\000\244\000\244\000\244\000\244\000\244\000\
\244\000\245\000\000\000\000\000\000\000\016\000\245\000\018\000\
\245\000\245\000\000\000\000\000\057\000\000\000\023\000\000\000\
\024\000\000\000\245\000\245\000\018\000\108\000\025\000\026\000\
\000\000\057\000\000\000\023\000\000\000\024\000\245\000\000\000\
\000\000\000\000\000\000\245\000\003\000\000\000\004\000\005\000\
\006\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000\
\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\245\000\000\000\245\000\000\000\000\000\
\000\000\000\000\010\000\000\000\245\000\000\000\245\000\056\000\
\245\000\000\000\245\000\245\000\245\000\245\000\245\000\000\000\
\015\000\016\000\245\000\000\000\245\000\245\000\245\000\245\000\
\245\000\245\000\246\000\000\000\000\000\003\000\000\000\246\000\
\018\000\246\000\246\000\000\000\000\000\057\000\180\000\023\000\
\000\000\024\000\000\000\246\000\246\000\000\000\000\000\025\000\
\026\000\023\001\000\000\242\000\000\000\000\000\000\000\246\000\
\023\001\000\000\000\000\000\000\246\000\000\000\012\000\000\000\
\181\000\000\000\000\000\000\000\000\000\246\000\000\000\000\000\
\000\000\246\000\000\000\173\000\000\000\009\001\173\000\000\000\
\000\000\000\000\000\000\023\001\246\000\000\000\246\000\182\000\
\000\000\000\000\000\000\019\000\020\000\246\000\183\000\246\000\
\023\001\246\000\000\000\246\000\246\000\246\000\246\000\246\000\
\000\000\000\000\000\000\246\000\000\000\246\000\246\000\246\000\
\246\000\246\000\246\000\023\001\023\001\009\001\000\000\000\000\
\000\000\023\001\023\001\000\000\023\001\023\001\023\001\023\001\
\023\001\023\001\000\000\000\000\023\001\023\001\023\001\023\001\
\023\001\023\001\170\000\155\000\006\001\170\000\000\000\155\000\
\173\000\009\001\009\001\009\001\009\001\009\001\009\001\009\001\
\000\000\009\001\009\001\009\001\009\001\009\001\009\001\172\000\
\000\000\008\001\172\000\000\000\155\000\000\000\000\000\155\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\155\000\155\000\000\000\000\000\006\001\171\000\000\000\007\001\
\171\000\000\000\000\000\000\000\000\000\000\000\155\000\155\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\001\000\000\000\000\000\000\000\000\000\000\170\000\
\006\001\006\001\006\001\006\001\006\001\006\001\006\001\000\000\
\006\001\006\001\006\001\006\001\006\001\006\001\000\000\007\001\
\000\000\000\000\000\000\000\000\172\000\008\001\008\001\008\001\
\008\001\008\001\008\001\008\001\000\000\008\001\008\001\008\001\
\008\001\008\001\008\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\171\000\007\001\007\001\007\001\007\001\007\001\
\007\001\007\001\000\000\007\001\007\001\007\001\007\001\007\001\
\007\001\237\000\000\000\000\000\000\000\000\000\237\000\000\000\
\237\000\237\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\237\000\237\000\238\000\000\000\000\000\003\000\
\000\000\238\000\000\000\238\000\238\000\000\000\237\000\000\000\
\180\000\000\000\000\000\237\000\000\000\238\000\238\000\000\000\
\000\000\255\000\000\000\000\000\237\000\000\000\000\000\000\000\
\237\000\238\000\000\000\000\000\000\000\000\000\238\000\000\000\
\012\000\000\000\181\000\237\000\000\000\237\000\000\000\238\000\
\000\000\000\000\000\000\238\000\237\000\000\000\237\000\000\000\
\237\000\000\000\237\000\237\000\237\000\000\000\238\000\000\000\
\238\000\182\000\237\000\000\000\000\000\019\000\020\000\238\000\
\183\000\238\000\000\000\238\000\239\000\238\000\238\000\238\000\
\000\000\239\000\000\000\239\000\239\000\238\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\239\000\239\000\240\000\
\000\000\000\000\003\000\000\000\240\000\000\000\240\000\240\000\
\000\000\239\000\000\000\180\000\000\000\000\000\239\000\000\000\
\240\000\240\000\000\000\000\000\000\000\000\000\000\000\239\000\
\000\000\000\000\001\001\239\000\240\000\000\000\000\000\000\000\
\000\000\240\000\000\000\012\000\000\000\181\000\239\000\000\000\
\239\000\000\000\240\000\000\000\000\000\000\000\240\000\239\000\
\000\000\239\000\000\000\239\000\000\000\239\000\239\000\239\000\
\000\000\240\000\000\000\240\000\182\000\239\000\000\000\000\000\
\019\000\020\000\240\000\183\000\240\000\000\000\240\000\241\000\
\240\000\240\000\240\000\000\000\241\000\000\000\241\000\241\000\
\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\241\000\241\000\242\000\000\000\000\000\000\000\000\000\242\000\
\000\000\242\000\242\000\000\000\241\000\000\000\000\000\000\000\
\000\000\241\000\000\000\242\000\242\000\000\000\000\000\000\000\
\000\000\000\000\241\000\000\000\000\000\000\000\241\000\242\000\
\000\000\000\000\000\000\000\000\242\000\000\000\000\000\000\000\
\000\000\241\000\000\000\241\000\000\000\242\000\000\000\000\000\
\000\000\242\000\241\000\000\000\241\000\000\000\241\000\000\000\
\241\000\241\000\241\000\036\000\242\000\036\000\242\000\036\000\
\241\000\000\000\000\000\000\000\000\000\242\000\000\000\242\000\
\000\000\242\000\243\000\242\000\242\000\242\000\036\000\243\000\
\000\000\243\000\243\000\242\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\243\000\243\000\231\000\036\000\000\000\
\000\000\000\000\231\000\000\000\036\000\231\000\036\000\243\000\
\000\000\036\000\000\000\000\000\243\000\000\000\231\000\231\000\
\036\000\000\000\000\000\000\000\000\000\243\000\000\000\000\000\
\000\000\243\000\231\000\000\000\000\000\000\000\000\000\231\000\
\000\000\000\000\000\000\000\000\243\000\000\000\243\000\000\000\
\231\000\000\000\000\000\000\000\231\000\243\000\000\000\243\000\
\000\000\243\000\000\000\243\000\243\000\243\000\159\000\231\000\
\000\000\231\000\159\000\243\000\000\000\000\000\000\000\000\000\
\231\000\000\000\231\000\000\000\231\000\232\000\231\000\231\000\
\231\000\000\000\232\000\000\000\000\000\232\000\231\000\159\000\
\000\000\000\000\159\000\000\000\011\001\000\000\232\000\232\000\
\000\000\000\000\000\000\159\000\159\000\000\000\011\001\011\001\
\000\000\000\000\232\000\009\001\000\000\000\000\000\000\232\000\
\000\000\159\000\159\000\000\000\000\000\009\001\009\001\000\000\
\232\000\000\000\000\000\000\000\232\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\001\000\000\000\000\232\000\
\000\000\232\000\000\000\000\000\000\000\000\000\000\000\000\000\
\232\000\000\000\232\000\009\001\232\000\000\000\232\000\232\000\
\232\000\000\000\000\000\000\000\006\001\000\000\232\000\187\000\
\011\001\011\001\011\001\011\001\011\001\011\001\006\001\006\001\
\011\001\011\001\011\001\011\001\011\001\011\001\178\000\009\001\
\009\001\009\001\009\001\009\001\009\001\008\001\000\000\009\001\
\009\001\009\001\009\001\009\001\009\001\000\000\000\000\008\001\
\008\001\000\000\000\000\000\000\006\001\000\000\007\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\001\007\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\001\000\000\175\000\
\006\001\006\001\006\001\006\001\006\001\006\001\000\000\000\000\
\006\001\006\001\006\001\006\001\006\001\006\001\007\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\177\000\008\001\008\001\008\001\008\001\008\001\008\001\000\000\
\000\000\008\001\008\001\008\001\008\001\008\001\008\001\000\000\
\000\000\176\000\007\001\007\001\007\001\007\001\007\001\007\001\
\000\000\000\000\007\001\007\001\007\001\007\001\007\001\007\001\
\228\000\000\000\000\000\153\000\000\000\228\000\000\000\153\000\
\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\228\000\228\000\229\000\000\000\000\000\000\000\000\000\
\229\000\000\000\000\000\229\000\153\000\228\000\000\000\153\000\
\000\000\000\000\228\000\005\001\229\000\229\000\000\000\000\000\
\153\000\153\000\000\000\228\000\000\000\005\001\005\001\000\000\
\229\000\000\000\000\000\000\000\000\000\229\000\153\000\153\000\
\000\000\000\000\228\000\000\000\228\000\000\000\229\000\000\000\
\000\000\000\000\000\000\228\000\000\000\228\000\000\000\228\000\
\000\000\228\000\228\000\005\001\000\000\229\000\000\000\229\000\
\000\000\228\000\000\000\153\000\000\000\154\000\229\000\155\000\
\229\000\000\000\229\000\000\000\229\000\229\000\000\000\000\000\
\000\000\000\000\000\000\000\000\229\000\000\000\156\000\005\001\
\005\001\005\001\005\001\005\001\005\001\157\000\000\000\005\001\
\005\001\005\001\005\001\005\001\005\001\230\000\158\000\000\000\
\000\000\000\000\230\000\000\000\159\000\230\000\000\000\000\000\
\038\000\160\000\038\000\010\001\038\000\000\000\230\000\230\000\
\161\000\000\000\000\000\000\000\000\000\010\001\010\001\000\000\
\000\000\005\001\230\000\038\000\000\000\000\000\000\000\230\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\230\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\010\001\000\000\000\000\038\000\230\000\
\000\000\230\000\000\000\000\000\000\000\038\000\000\000\000\000\
\230\000\005\001\230\000\000\000\230\000\000\000\230\000\230\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\000\010\001\
\010\001\010\001\010\001\010\001\010\001\000\000\000\000\010\001\
\010\001\010\001\010\001\010\001\010\001\005\001\005\001\005\001\
\005\001\005\001\005\001\005\001\000\000\005\001\005\001\005\001\
\005\001\005\001\005\001\141\000\142\000\000\000\004\000\005\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\028\001\
\142\000\000\000\004\000\005\000\006\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\009\000\000\000\143\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\015\000\016\000\143\000\056\000\000\000\037\001\142\000\000\000\
\004\000\005\000\006\000\000\000\015\000\016\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\057\000\144\000\023\000\
\000\000\024\000\009\000\000\000\018\000\000\000\000\000\025\000\
\026\000\057\000\029\001\023\000\010\000\024\000\000\000\000\000\
\143\000\056\000\000\000\025\000\026\000\000\000\000\000\000\000\
\000\000\000\000\015\000\016\000\000\000\053\001\142\000\000\000\
\004\000\005\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\057\000\
\038\001\023\000\009\000\024\000\000\000\000\000\000\000\000\000\
\000\000\025\000\026\000\000\000\010\000\000\000\000\000\000\000\
\143\000\056\000\000\000\084\001\142\000\000\000\004\000\005\000\
\006\000\000\000\015\000\016\000\000\000\000\000\000\000\173\001\
\142\000\000\000\004\000\005\000\006\000\000\000\000\000\000\000\
\009\000\000\000\018\000\000\000\000\000\000\000\000\000\057\000\
\054\001\023\000\010\000\024\000\009\000\000\000\143\000\056\000\
\000\000\025\000\026\000\000\000\000\000\000\000\010\000\000\000\
\015\000\016\000\143\000\056\000\000\000\217\001\142\000\000\000\
\004\000\005\000\006\000\000\000\015\000\016\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\057\000\085\001\023\000\
\000\000\024\000\009\000\000\000\018\000\000\000\000\000\025\000\
\026\000\057\000\174\001\023\000\010\000\024\000\000\000\000\000\
\143\000\056\000\000\000\025\000\026\000\000\000\000\000\000\000\
\000\000\000\000\015\000\016\000\000\000\235\001\142\000\000\000\
\004\000\005\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\057\000\
\218\001\023\000\009\000\024\000\000\000\000\000\000\000\000\000\
\000\000\025\000\026\000\000\000\010\000\000\000\000\000\000\000\
\143\000\056\000\000\000\236\000\003\000\000\000\004\000\005\000\
\006\000\000\000\015\000\016\000\000\000\000\000\000\000\011\002\
\003\000\000\000\004\000\005\000\006\000\000\000\000\000\000\000\
\009\000\000\000\018\000\000\000\000\000\000\000\000\000\057\000\
\236\001\023\000\010\000\024\000\009\000\000\000\000\000\056\000\
\000\000\025\000\026\000\000\000\000\000\000\000\010\000\000\000\
\015\000\016\000\000\000\056\000\000\000\054\002\003\000\000\000\
\004\000\005\000\006\000\000\000\015\000\016\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\057\000\237\000\023\000\
\000\000\024\000\009\000\000\000\018\000\000\000\000\000\025\000\
\026\000\057\000\012\002\023\000\010\000\024\000\000\000\000\000\
\000\000\056\000\000\000\025\000\026\000\000\000\000\000\000\000\
\000\000\000\000\015\000\016\000\000\000\071\000\003\000\000\000\
\004\000\005\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\162\000\018\000\000\000\000\000\162\000\000\000\057\000\
\055\002\023\000\009\000\024\000\000\000\000\000\000\000\000\000\
\000\000\025\000\026\000\000\000\010\000\000\000\000\000\000\000\
\000\000\056\000\162\000\074\000\003\000\162\000\004\000\005\000\
\006\000\000\000\015\000\016\000\000\000\000\000\162\000\162\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\018\000\000\000\162\000\162\000\000\000\057\000\
\000\000\023\000\010\000\024\000\000\000\000\000\000\000\056\000\
\000\000\025\000\026\000\000\000\000\000\000\000\000\000\000\000\
\015\000\016\000\000\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\065\000\
\018\000\000\000\000\000\000\000\000\000\057\000\000\000\023\000\
\065\000\024\000\000\000\000\000\000\000\000\000\065\000\025\000\
\026\000\065\000\065\000\000\000\000\000\065\000\000\000\065\000\
\000\000\000\000\065\000\065\000\000\000\000\000\000\000\156\000\
\065\000\065\000\000\000\156\000\000\000\000\000\000\000\000\000\
\065\000\065\000\003\000\000\000\004\000\005\000\006\000\000\000\
\065\000\000\000\065\000\180\000\000\000\065\000\000\000\065\000\
\156\000\065\000\000\000\156\000\000\000\000\000\009\000\065\000\
\065\000\000\000\000\000\000\000\156\000\156\000\000\000\000\000\
\010\000\000\000\000\000\012\000\000\000\013\000\000\000\000\000\
\000\000\000\000\156\000\156\000\000\000\000\000\015\000\016\000\
\000\000\000\000\003\000\000\000\004\000\005\000\006\000\000\000\
\000\000\000\000\000\000\000\000\182\000\146\001\018\000\000\000\
\019\000\020\000\000\000\194\000\000\000\023\000\009\000\024\000\
\029\002\000\000\000\000\000\000\000\000\025\000\026\000\000\000\
\010\000\000\000\000\000\147\001\000\000\148\001\000\000\000\000\
\003\000\000\000\004\000\005\000\006\000\000\000\015\000\016\000\
\000\000\000\000\000\000\146\001\000\000\000\000\000\000\000\000\
\000\000\031\002\000\000\000\000\009\000\000\000\018\000\000\000\
\149\001\000\000\000\000\057\000\000\000\023\000\010\000\024\000\
\000\000\147\001\000\000\148\001\000\000\025\000\026\000\000\000\
\000\000\000\000\000\000\000\000\015\000\016\000\000\000\000\000\
\003\000\000\000\004\000\005\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\146\001\018\000\000\000\149\001\000\000\
\000\000\057\000\033\002\023\000\009\000\024\000\000\000\000\000\
\000\000\000\000\000\000\025\000\026\000\000\000\010\000\000\000\
\000\000\147\001\000\000\148\001\000\000\000\000\003\000\000\000\
\004\000\005\000\006\000\000\000\015\000\016\000\000\000\000\000\
\000\000\146\001\142\000\000\000\004\000\005\000\006\000\000\000\
\000\000\000\000\009\000\000\000\018\000\000\000\149\001\000\000\
\000\000\057\000\000\000\023\000\010\000\024\000\009\000\147\001\
\000\000\148\001\000\000\025\000\026\000\000\000\000\000\000\000\
\010\000\000\000\015\000\016\000\143\000\056\000\003\000\000\000\
\004\000\005\000\006\000\000\000\000\000\000\000\015\000\016\000\
\000\000\000\000\018\000\000\000\149\001\000\000\000\000\057\000\
\000\000\023\000\009\000\024\000\000\000\000\000\018\000\000\000\
\000\000\025\000\026\000\057\000\010\000\023\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\025\000\026\000\000\000\
\000\000\000\000\015\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\057\000\
\000\000\023\000\000\000\024\000\000\000\048\001\048\001\048\001\
\000\000\025\000\026\000\048\001\000\000\048\001\048\001\000\000\
\048\001\000\000\048\001\048\001\048\001\000\000\000\000\000\000\
\000\000\048\001\000\000\000\000\000\000\000\000\000\000\000\000\
\048\001\048\001\048\001\048\001\000\000\048\001\048\001\000\000\
\048\001\000\000\048\001\000\000\048\001\048\001\048\001\048\001\
\000\000\048\001\000\000\000\000\000\000\048\001\048\001\048\001\
\048\001\048\001\048\001\048\001\048\001\048\001\048\001\048\001\
\065\000\065\000\000\000\048\001\000\000\065\000\000\000\000\000\
\048\001\065\000\000\000\000\000\000\000\000\000\048\001\048\001\
\000\000\160\000\000\000\000\000\000\000\160\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\065\000\000\000\000\000\
\000\000\065\000\000\000\065\000\000\000\000\000\065\000\065\000\
\000\000\000\000\160\000\000\000\000\000\160\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\065\000\160\000\160\000\
\000\000\000\000\065\000\000\000\000\000\000\000\065\000\065\000\
\000\000\065\000\082\000\082\000\160\000\160\000\082\000\082\000\
\000\000\082\000\082\000\000\000\082\000\000\000\082\000\082\000\
\082\000\000\000\000\000\000\000\000\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\082\000\082\000\082\000\082\000\
\000\000\082\000\082\000\000\000\082\000\000\000\082\000\000\000\
\082\000\082\000\082\000\082\000\000\000\082\000\000\000\000\000\
\000\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\047\001\047\001\000\000\000\000\082\000\
\047\001\000\000\047\001\047\001\000\000\047\001\000\000\047\001\
\047\001\047\001\000\000\000\000\000\000\000\000\047\001\000\000\
\000\000\000\000\000\000\000\000\000\000\047\001\047\001\047\001\
\047\001\000\000\047\001\047\001\000\000\047\001\000\000\047\001\
\000\000\047\001\047\001\047\001\047\001\000\000\047\001\000\000\
\000\000\000\000\047\001\047\001\047\001\047\001\047\001\047\001\
\047\001\047\001\047\001\047\001\065\000\065\000\000\000\000\000\
\047\001\065\000\000\000\000\000\065\000\000\000\065\000\000\000\
\065\000\065\000\065\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\065\000\
\065\000\065\000\000\000\065\000\065\000\000\000\065\000\000\000\
\065\000\000\000\065\000\065\000\065\000\065\000\000\000\065\000\
\000\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\097\000\055\000\000\000\
\000\000\065\000\055\000\000\000\000\000\097\000\000\000\097\000\
\000\000\097\000\097\000\097\000\000\000\000\000\000\000\000\000\
\097\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\097\000\000\000\055\000\000\000\097\000\097\000\000\000\097\000\
\000\000\000\000\000\000\055\000\055\000\097\000\097\000\000\000\
\097\000\000\000\000\000\000\000\097\000\097\000\097\000\097\000\
\097\000\055\000\055\000\097\000\000\000\097\000\097\000\057\000\
\000\000\000\000\097\000\057\000\000\000\000\000\097\000\000\000\
\097\000\000\000\097\000\097\000\097\000\000\000\000\000\000\000\
\000\000\097\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\097\000\000\000\057\000\000\000\097\000\097\000\000\000\
\097\000\000\000\000\000\000\000\057\000\057\000\097\000\097\000\
\000\000\097\000\000\000\000\000\000\000\097\000\097\000\097\000\
\097\000\097\000\057\000\057\000\097\000\000\000\097\000\097\000\
\056\000\000\000\000\000\097\000\056\000\000\000\000\000\097\000\
\000\000\097\000\000\000\097\000\097\000\097\000\000\000\000\000\
\000\000\000\000\097\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\097\000\000\000\056\000\000\000\097\000\097\000\
\000\000\097\000\000\000\000\000\000\000\056\000\056\000\097\000\
\097\000\000\000\097\000\000\000\000\000\000\000\097\000\097\000\
\097\000\097\000\097\000\056\000\056\000\097\000\097\000\097\000\
\000\000\000\000\000\000\000\000\097\000\000\000\097\000\000\000\
\097\000\000\000\097\000\097\000\097\000\000\000\000\000\000\000\
\000\000\097\000\000\000\000\000\000\000\000\000\000\000\099\000\
\000\000\097\000\000\000\000\000\000\000\097\000\097\000\099\000\
\097\000\099\000\000\000\099\000\099\000\099\000\097\000\097\000\
\000\000\097\000\099\000\000\000\000\000\097\000\097\000\097\000\
\097\000\097\000\099\000\000\000\097\000\000\000\097\000\099\000\
\000\000\099\000\000\000\097\000\000\000\000\000\000\000\099\000\
\099\000\000\000\099\000\000\000\144\000\000\000\099\000\099\000\
\099\000\099\000\099\000\000\000\144\000\099\000\144\000\099\000\
\144\000\144\000\144\000\000\000\099\000\000\000\000\000\144\000\
\000\000\000\000\000\000\000\000\000\000\099\000\000\000\144\000\
\000\000\000\000\000\000\144\000\144\000\099\000\144\000\099\000\
\000\000\099\000\099\000\099\000\000\000\144\000\000\000\144\000\
\099\000\000\000\000\000\000\000\144\000\144\000\144\000\144\000\
\099\000\000\000\144\000\000\000\144\000\099\000\000\000\099\000\
\000\000\144\000\000\000\000\000\000\000\000\000\099\000\000\000\
\099\000\000\000\101\000\000\000\000\000\099\000\099\000\099\000\
\099\000\000\000\101\000\099\000\101\000\099\000\101\000\101\000\
\101\000\000\000\099\000\000\000\000\000\101\000\000\000\000\000\
\000\000\000\000\000\000\102\000\000\000\101\000\000\000\000\000\
\000\000\000\000\101\000\102\000\101\000\102\000\000\000\102\000\
\102\000\102\000\000\000\101\000\000\000\101\000\102\000\000\000\
\000\000\000\000\101\000\101\000\101\000\101\000\102\000\000\000\
\101\000\000\000\101\000\102\000\000\000\102\000\000\000\101\000\
\000\000\154\000\000\000\000\000\102\000\154\000\102\000\000\000\
\115\000\000\000\000\000\102\000\102\000\102\000\102\000\000\000\
\036\000\102\000\036\000\102\000\036\000\115\000\115\000\000\000\
\102\000\000\000\154\000\000\000\000\000\154\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\154\000\154\000\
\000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\000\000\000\036\000\154\000\154\000\000\000\000\000\
\115\000\036\000\115\000\036\000\000\000\000\000\036\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000"

let yycheck = "\001\000\
\014\000\001\000\085\000\151\000\230\000\001\000\122\000\114\000\
\001\000\098\001\115\000\011\000\139\000\093\001\095\000\000\000\
\000\001\013\000\066\001\126\000\127\000\020\001\001\001\019\000\
\020\000\001\001\022\000\023\000\024\000\029\000\135\000\005\001\
\091\000\066\001\001\001\239\000\022\000\000\001\024\000\020\001\
\001\000\016\001\005\001\247\000\102\001\190\000\000\001\105\001\
\137\001\029\001\001\001\032\001\197\000\046\001\050\000\181\001\
\233\001\234\001\068\001\043\001\056\000\057\000\207\000\208\000\
\000\001\005\001\149\000\063\000\016\001\025\000\026\000\057\000\
\001\001\001\001\000\001\202\000\069\001\026\001\058\001\008\001\
\080\000\056\001\008\001\067\001\033\001\211\001\000\001\071\001\
\087\001\073\001\066\001\000\001\088\000\151\001\074\001\000\001\
\072\001\045\001\000\001\078\001\070\001\029\001\000\001\161\001\
\067\001\119\000\082\001\081\001\075\001\000\001\073\001\008\001\
\114\000\067\001\162\001\163\001\118\000\113\000\223\000\073\001\
\020\001\114\001\118\000\074\001\126\000\127\000\000\001\126\001\
\049\002\162\001\163\001\067\001\072\001\069\001\130\000\071\001\
\057\002\133\000\074\001\060\002\199\000\067\001\201\000\000\001\
\130\000\074\001\000\001\073\001\005\001\105\000\106\000\008\001\
\233\000\067\001\072\001\029\001\074\001\005\001\067\001\073\001\
\130\001\021\001\067\001\252\001\253\001\067\001\074\001\072\001\
\248\001\067\001\008\001\119\001\029\001\008\001\000\001\073\001\
\067\001\074\001\000\001\078\001\079\001\000\001\178\000\001\001\
\058\001\181\000\000\001\183\000\190\000\017\001\041\001\001\001\
\081\001\067\001\022\001\197\000\192\000\183\000\194\000\073\001\
\074\001\058\001\004\002\005\002\006\002\207\000\208\000\000\000\
\194\000\211\000\067\001\008\001\101\001\067\001\032\001\104\001\
\073\001\074\001\089\001\073\001\216\000\217\000\000\001\005\001\
\072\001\221\000\008\001\000\001\176\001\080\001\226\000\029\001\
\083\001\122\001\123\001\000\001\074\001\000\001\007\001\074\001\
\005\001\067\001\047\001\008\001\240\000\067\001\106\001\107\001\
\067\001\245\000\198\001\073\001\248\000\067\001\073\001\144\001\
\058\002\000\001\118\001\255\000\058\001\063\002\064\002\020\001\
\029\001\066\001\093\001\068\001\034\001\001\001\075\001\160\001\
\000\001\016\001\014\001\068\001\033\001\074\001\024\001\025\001\
\009\001\141\001\011\001\000\001\013\001\000\001\000\001\000\001\
\081\001\067\001\072\001\183\001\074\001\058\001\067\001\041\001\
\036\001\000\001\147\001\028\001\058\001\066\001\067\001\061\001\
\067\001\051\001\035\001\073\001\073\001\074\001\073\001\000\001\
\000\001\056\001\000\001\044\001\081\001\082\001\000\001\066\001\
\000\001\050\001\001\001\052\001\067\001\000\001\055\001\073\001\
\131\001\066\001\000\001\042\001\224\001\062\001\080\001\081\001\
\076\001\083\001\049\001\067\001\043\001\222\001\145\001\087\001\
\204\001\000\001\014\001\015\001\074\001\152\001\067\001\001\001\
\067\001\067\001\067\001\101\001\102\001\000\001\104\001\105\001\
\047\001\000\001\074\001\042\001\067\001\041\001\005\001\020\001\
\071\001\008\001\049\001\001\001\048\001\003\001\004\001\005\001\
\122\001\123\001\067\001\067\001\033\001\067\001\126\001\051\001\
\187\001\067\001\189\001\067\001\075\001\192\001\029\001\021\001\
\067\001\066\001\019\002\020\002\199\001\067\001\144\001\072\001\
\025\002\031\001\029\001\080\001\057\001\151\001\017\001\020\001\
\148\001\149\001\037\001\022\001\067\001\159\001\160\001\161\001\
\046\001\052\001\068\001\058\001\033\001\248\001\008\001\072\001\
\067\001\162\001\163\001\066\001\067\001\056\001\102\001\061\001\
\081\001\105\001\073\001\074\001\066\001\066\001\068\001\038\001\
\070\001\072\001\116\001\029\001\057\001\043\001\076\001\077\001\
\194\001\066\001\081\001\037\001\081\001\082\001\066\001\072\001\
\036\002\076\001\077\001\039\002\072\001\201\001\220\001\221\001\
\001\001\209\001\003\001\004\001\005\001\066\001\056\001\246\001\
\247\001\010\001\068\001\072\001\023\002\024\002\072\001\151\001\
\255\001\072\001\073\001\020\001\021\001\082\001\232\001\233\001\
\234\001\161\001\164\001\074\001\166\001\073\001\031\001\032\001\
\066\001\034\001\066\001\036\001\037\001\241\001\072\001\060\001\
\072\001\000\001\106\001\107\001\045\001\046\001\005\001\066\001\
\002\002\008\001\004\002\005\002\006\002\072\001\097\000\098\000\
\081\001\060\001\059\001\043\001\061\001\073\001\063\001\064\001\
\065\001\066\001\066\001\068\001\066\001\070\001\029\001\000\001\
\072\001\069\001\072\001\076\001\077\001\074\001\071\001\008\001\
\074\001\081\001\082\001\031\002\082\001\033\002\001\001\073\001\
\036\002\005\001\069\001\039\002\230\001\073\001\060\001\049\002\
\232\001\233\001\234\001\058\001\029\001\239\001\001\001\057\002\
\058\002\243\001\060\002\008\001\067\001\063\002\064\002\249\001\
\076\001\067\001\073\001\074\001\001\001\082\001\000\002\074\001\
\001\001\034\001\073\001\001\001\004\002\005\002\006\002\009\002\
\074\001\058\001\002\001\013\001\000\001\001\001\006\001\017\002\
\018\002\005\001\067\001\007\001\008\001\018\001\066\001\005\001\
\073\001\074\001\001\001\001\001\081\001\017\001\018\001\001\001\
\066\001\060\001\082\001\027\001\074\001\017\001\030\001\014\001\
\015\001\029\001\001\001\024\001\017\001\016\001\034\001\039\001\
\040\001\049\002\073\001\047\001\082\001\032\001\060\001\043\001\
\060\001\057\002\058\002\047\001\060\002\053\001\054\001\063\002\
\064\002\022\001\060\001\042\001\002\001\005\001\058\001\066\001\
\060\001\073\001\049\001\074\001\051\001\066\001\066\001\067\001\
\001\001\069\001\048\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\000\001\001\001\081\001\
\006\001\074\001\005\001\074\001\007\001\008\001\099\000\100\000\
\101\000\102\000\103\000\104\000\074\001\002\001\017\001\018\001\
\074\001\074\001\072\001\001\001\043\001\027\001\074\001\060\001\
\030\001\060\001\029\001\074\001\074\001\074\001\074\001\034\001\
\001\001\039\001\040\001\074\001\066\001\073\001\000\001\017\001\
\043\001\074\001\074\001\005\001\047\001\074\001\008\001\053\001\
\054\001\024\001\060\001\022\001\060\001\069\001\071\001\058\001\
\074\001\060\001\017\001\024\001\069\001\022\001\001\001\066\001\
\067\001\002\001\069\001\029\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\086\001\087\001\088\001\000\001\022\001\
\001\001\001\001\074\001\005\001\002\001\007\001\008\001\074\001\
\058\001\074\001\010\001\001\001\024\001\074\001\074\001\017\001\
\018\001\067\001\018\001\022\001\021\002\001\000\001\000\073\001\
\074\001\022\001\001\000\029\001\001\000\118\001\007\001\188\001\
\034\001\066\001\034\001\089\001\036\001\112\001\141\001\076\001\
\077\001\043\001\049\001\207\001\005\001\047\001\083\001\084\001\
\085\001\086\001\087\001\088\001\167\001\209\001\105\001\063\002\
\058\001\121\001\060\001\059\001\104\001\064\002\094\000\063\001\
\064\001\067\001\066\001\069\001\123\001\071\001\047\001\073\001\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\081\001\
\122\001\083\001\084\001\085\001\086\001\087\001\088\001\000\001\
\096\000\015\000\107\000\133\000\005\001\226\000\007\001\008\001\
\178\000\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\017\001\018\001\083\001\084\001\085\001\086\001\087\001\088\001\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\007\001\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\255\255\255\255\047\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\058\001\255\255\060\001\255\255\255\255\255\255\255\255\
\255\255\010\001\067\001\255\255\069\001\255\255\071\001\047\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\081\001\255\255\083\001\084\001\085\001\086\001\087\001\088\001\
\000\001\034\001\255\255\036\001\255\255\005\001\255\255\007\001\
\008\001\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\017\001\018\001\083\001\084\001\085\001\086\001\087\001\
\088\001\255\255\059\001\255\255\255\255\029\001\063\001\064\001\
\255\255\066\001\034\001\001\001\255\255\003\001\004\001\005\001\
\255\255\255\255\255\255\043\001\255\255\255\255\255\255\047\001\
\001\001\255\255\003\001\004\001\005\001\255\255\255\255\021\001\
\255\255\255\255\058\001\255\255\060\001\255\255\255\255\255\255\
\255\255\031\001\255\255\067\001\021\001\069\001\036\001\071\001\
\255\255\073\001\074\001\075\001\076\001\077\001\031\001\045\001\
\046\001\081\001\255\255\083\001\084\001\085\001\086\001\087\001\
\088\001\000\001\255\255\255\255\255\255\046\001\005\001\061\001\
\007\001\008\001\255\255\255\255\066\001\255\255\068\001\255\255\
\070\001\255\255\017\001\018\001\061\001\075\001\076\001\077\001\
\255\255\066\001\255\255\068\001\255\255\070\001\029\001\255\255\
\255\255\255\255\255\255\034\001\001\001\255\255\003\001\004\001\
\005\001\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\047\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\058\001\255\255\060\001\255\255\255\255\
\255\255\255\255\031\001\255\255\067\001\255\255\069\001\036\001\
\071\001\255\255\073\001\074\001\075\001\076\001\077\001\255\255\
\045\001\046\001\081\001\255\255\083\001\084\001\085\001\086\001\
\087\001\088\001\000\001\255\255\255\255\001\001\255\255\005\001\
\061\001\007\001\008\001\255\255\255\255\066\001\010\001\068\001\
\255\255\070\001\255\255\017\001\018\001\255\255\255\255\076\001\
\077\001\000\001\255\255\023\001\255\255\255\255\255\255\029\001\
\007\001\255\255\255\255\255\255\034\001\255\255\034\001\255\255\
\036\001\255\255\255\255\255\255\255\255\043\001\255\255\255\255\
\255\255\047\001\255\255\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\034\001\058\001\255\255\060\001\059\001\
\255\255\255\255\255\255\063\001\064\001\067\001\066\001\069\001\
\047\001\071\001\255\255\073\001\074\001\075\001\076\001\077\001\
\255\255\255\255\255\255\081\001\255\255\083\001\084\001\085\001\
\086\001\087\001\088\001\066\001\067\001\047\001\255\255\255\255\
\255\255\072\001\073\001\255\255\075\001\076\001\077\001\078\001\
\079\001\080\001\255\255\255\255\083\001\084\001\085\001\086\001\
\087\001\088\001\005\001\002\001\007\001\008\001\255\255\006\001\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\087\001\088\001\005\001\
\255\255\007\001\008\001\255\255\027\001\255\255\255\255\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\255\255\047\001\005\001\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\255\255\
\083\001\084\001\085\001\086\001\087\001\088\001\255\255\047\001\
\255\255\255\255\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\255\255\083\001\084\001\085\001\
\086\001\087\001\088\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\080\001\081\001\255\255\083\001\084\001\085\001\086\001\087\001\
\088\001\000\001\255\255\255\255\255\255\255\255\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\000\001\255\255\255\255\001\001\
\255\255\005\001\255\255\007\001\008\001\255\255\029\001\255\255\
\010\001\255\255\255\255\034\001\255\255\017\001\018\001\255\255\
\255\255\019\001\255\255\255\255\043\001\255\255\255\255\255\255\
\047\001\029\001\255\255\255\255\255\255\255\255\034\001\255\255\
\034\001\255\255\036\001\058\001\255\255\060\001\255\255\043\001\
\255\255\255\255\255\255\047\001\067\001\255\255\069\001\255\255\
\071\001\255\255\073\001\074\001\075\001\255\255\058\001\255\255\
\060\001\059\001\081\001\255\255\255\255\063\001\064\001\067\001\
\066\001\069\001\255\255\071\001\000\001\073\001\074\001\075\001\
\255\255\005\001\255\255\007\001\008\001\081\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\000\001\
\255\255\255\255\001\001\255\255\005\001\255\255\007\001\008\001\
\255\255\029\001\255\255\010\001\255\255\255\255\034\001\255\255\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\043\001\
\255\255\255\255\025\001\047\001\029\001\255\255\255\255\255\255\
\255\255\034\001\255\255\034\001\255\255\036\001\058\001\255\255\
\060\001\255\255\043\001\255\255\255\255\255\255\047\001\067\001\
\255\255\069\001\255\255\071\001\255\255\073\001\074\001\075\001\
\255\255\058\001\255\255\060\001\059\001\081\001\255\255\255\255\
\063\001\064\001\067\001\066\001\069\001\255\255\071\001\000\001\
\073\001\074\001\075\001\255\255\005\001\255\255\007\001\008\001\
\081\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\000\001\255\255\255\255\255\255\255\255\005\001\
\255\255\007\001\008\001\255\255\029\001\255\255\255\255\255\255\
\255\255\034\001\255\255\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\043\001\255\255\255\255\255\255\047\001\029\001\
\255\255\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\255\255\058\001\255\255\060\001\255\255\043\001\255\255\255\255\
\255\255\047\001\067\001\255\255\069\001\255\255\071\001\255\255\
\073\001\074\001\075\001\009\001\058\001\011\001\060\001\013\001\
\081\001\255\255\255\255\255\255\255\255\067\001\255\255\069\001\
\255\255\071\001\000\001\073\001\074\001\075\001\028\001\005\001\
\255\255\007\001\008\001\081\001\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\000\001\044\001\255\255\
\255\255\255\255\005\001\255\255\050\001\008\001\052\001\029\001\
\255\255\055\001\255\255\255\255\034\001\255\255\017\001\018\001\
\062\001\255\255\255\255\255\255\255\255\043\001\255\255\255\255\
\255\255\047\001\029\001\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\058\001\255\255\060\001\255\255\
\043\001\255\255\255\255\255\255\047\001\067\001\255\255\069\001\
\255\255\071\001\255\255\073\001\074\001\075\001\002\001\058\001\
\255\255\060\001\006\001\081\001\255\255\255\255\255\255\255\255\
\067\001\255\255\069\001\255\255\071\001\000\001\073\001\074\001\
\075\001\255\255\005\001\255\255\255\255\008\001\081\001\027\001\
\255\255\255\255\030\001\255\255\007\001\255\255\017\001\018\001\
\255\255\255\255\255\255\039\001\040\001\255\255\017\001\018\001\
\255\255\255\255\029\001\007\001\255\255\255\255\255\255\034\001\
\255\255\053\001\054\001\255\255\255\255\017\001\018\001\255\255\
\043\001\255\255\255\255\255\255\047\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\047\001\255\255\255\255\058\001\
\255\255\060\001\255\255\255\255\255\255\255\255\255\255\255\255\
\067\001\255\255\069\001\047\001\071\001\255\255\073\001\074\001\
\075\001\255\255\255\255\255\255\007\001\255\255\081\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\017\001\018\001\
\083\001\084\001\085\001\086\001\087\001\088\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\007\001\255\255\083\001\
\084\001\085\001\086\001\087\001\088\001\255\255\255\255\017\001\
\018\001\255\255\255\255\255\255\047\001\255\255\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\255\255\255\255\
\083\001\084\001\085\001\086\001\087\001\088\001\047\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\080\001\255\255\
\255\255\083\001\084\001\085\001\086\001\087\001\088\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\255\255\255\255\083\001\084\001\085\001\086\001\087\001\088\001\
\000\001\255\255\255\255\002\001\255\255\005\001\255\255\006\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\000\001\255\255\255\255\255\255\255\255\
\005\001\255\255\255\255\008\001\027\001\029\001\255\255\030\001\
\255\255\255\255\034\001\007\001\017\001\018\001\255\255\255\255\
\039\001\040\001\255\255\043\001\255\255\017\001\018\001\255\255\
\029\001\255\255\255\255\255\255\255\255\034\001\053\001\054\001\
\255\255\255\255\058\001\255\255\060\001\255\255\043\001\255\255\
\255\255\255\255\255\255\067\001\255\255\069\001\255\255\071\001\
\255\255\073\001\074\001\047\001\255\255\058\001\255\255\060\001\
\255\255\081\001\255\255\009\001\255\255\011\001\067\001\013\001\
\069\001\255\255\071\001\255\255\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\255\255\081\001\255\255\028\001\075\001\
\076\001\077\001\078\001\079\001\080\001\035\001\255\255\083\001\
\084\001\085\001\086\001\087\001\088\001\000\001\044\001\255\255\
\255\255\255\255\005\001\255\255\050\001\008\001\255\255\255\255\
\009\001\055\001\011\001\007\001\013\001\255\255\017\001\018\001\
\062\001\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\255\255\007\001\029\001\028\001\255\255\255\255\255\255\034\001\
\255\255\255\255\035\001\255\255\255\255\255\255\255\255\255\255\
\043\001\255\255\255\255\044\001\255\255\255\255\255\255\255\255\
\255\255\050\001\255\255\047\001\255\255\255\255\055\001\058\001\
\255\255\060\001\255\255\255\255\255\255\062\001\255\255\255\255\
\067\001\047\001\069\001\255\255\071\001\255\255\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\255\255\081\001\075\001\
\076\001\077\001\078\001\079\001\080\001\255\255\255\255\083\001\
\084\001\085\001\086\001\087\001\088\001\075\001\076\001\077\001\
\078\001\079\001\080\001\081\001\255\255\083\001\084\001\085\001\
\086\001\087\001\088\001\000\001\001\001\255\255\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\000\001\
\001\001\255\255\003\001\004\001\005\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\255\255\021\001\255\255\035\001\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\255\255\
\045\001\046\001\035\001\036\001\255\255\000\001\001\001\255\255\
\003\001\004\001\005\001\255\255\045\001\046\001\255\255\255\255\
\061\001\255\255\255\255\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\021\001\255\255\061\001\255\255\255\255\076\001\
\077\001\066\001\067\001\068\001\031\001\070\001\255\255\255\255\
\035\001\036\001\255\255\076\001\077\001\255\255\255\255\255\255\
\255\255\255\255\045\001\046\001\255\255\000\001\001\001\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\255\255\066\001\
\067\001\068\001\021\001\070\001\255\255\255\255\255\255\255\255\
\255\255\076\001\077\001\255\255\031\001\255\255\255\255\255\255\
\035\001\036\001\255\255\000\001\001\001\255\255\003\001\004\001\
\005\001\255\255\045\001\046\001\255\255\255\255\255\255\000\001\
\001\001\255\255\003\001\004\001\005\001\255\255\255\255\255\255\
\021\001\255\255\061\001\255\255\255\255\255\255\255\255\066\001\
\067\001\068\001\031\001\070\001\021\001\255\255\035\001\036\001\
\255\255\076\001\077\001\255\255\255\255\255\255\031\001\255\255\
\045\001\046\001\035\001\036\001\255\255\000\001\001\001\255\255\
\003\001\004\001\005\001\255\255\045\001\046\001\255\255\255\255\
\061\001\255\255\255\255\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\021\001\255\255\061\001\255\255\255\255\076\001\
\077\001\066\001\067\001\068\001\031\001\070\001\255\255\255\255\
\035\001\036\001\255\255\076\001\077\001\255\255\255\255\255\255\
\255\255\255\255\045\001\046\001\255\255\000\001\001\001\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\255\255\066\001\
\067\001\068\001\021\001\070\001\255\255\255\255\255\255\255\255\
\255\255\076\001\077\001\255\255\031\001\255\255\255\255\255\255\
\035\001\036\001\255\255\000\001\001\001\255\255\003\001\004\001\
\005\001\255\255\045\001\046\001\255\255\255\255\255\255\000\001\
\001\001\255\255\003\001\004\001\005\001\255\255\255\255\255\255\
\021\001\255\255\061\001\255\255\255\255\255\255\255\255\066\001\
\067\001\068\001\031\001\070\001\021\001\255\255\255\255\036\001\
\255\255\076\001\077\001\255\255\255\255\255\255\031\001\255\255\
\045\001\046\001\255\255\036\001\255\255\000\001\001\001\255\255\
\003\001\004\001\005\001\255\255\045\001\046\001\255\255\255\255\
\061\001\255\255\255\255\255\255\255\255\066\001\067\001\068\001\
\255\255\070\001\021\001\255\255\061\001\255\255\255\255\076\001\
\077\001\066\001\067\001\068\001\031\001\070\001\255\255\255\255\
\255\255\036\001\255\255\076\001\077\001\255\255\255\255\255\255\
\255\255\255\255\045\001\046\001\255\255\000\001\001\001\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\061\001\255\255\255\255\006\001\255\255\066\001\
\067\001\068\001\021\001\070\001\255\255\255\255\255\255\255\255\
\255\255\076\001\077\001\255\255\031\001\255\255\255\255\255\255\
\255\255\036\001\027\001\000\001\001\001\030\001\003\001\004\001\
\005\001\255\255\045\001\046\001\255\255\255\255\039\001\040\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\255\255\061\001\255\255\053\001\054\001\255\255\066\001\
\255\255\068\001\031\001\070\001\255\255\255\255\255\255\036\001\
\255\255\076\001\077\001\255\255\255\255\255\255\255\255\255\255\
\045\001\046\001\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\255\255\012\001\
\061\001\255\255\255\255\255\255\255\255\066\001\255\255\068\001\
\021\001\070\001\255\255\255\255\255\255\255\255\027\001\076\001\
\077\001\030\001\031\001\255\255\255\255\034\001\255\255\036\001\
\255\255\255\255\039\001\040\001\255\255\255\255\255\255\002\001\
\045\001\046\001\255\255\006\001\255\255\255\255\255\255\255\255\
\053\001\054\001\001\001\255\255\003\001\004\001\005\001\255\255\
\061\001\255\255\063\001\010\001\255\255\066\001\255\255\068\001\
\027\001\070\001\255\255\030\001\255\255\255\255\021\001\076\001\
\077\001\255\255\255\255\255\255\039\001\040\001\255\255\255\255\
\031\001\255\255\255\255\034\001\255\255\036\001\255\255\255\255\
\255\255\255\255\053\001\054\001\255\255\255\255\045\001\046\001\
\255\255\255\255\001\001\255\255\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\255\255\059\001\012\001\061\001\255\255\
\063\001\064\001\255\255\066\001\255\255\068\001\021\001\070\001\
\023\001\255\255\255\255\255\255\255\255\076\001\077\001\255\255\
\031\001\255\255\255\255\034\001\255\255\036\001\255\255\255\255\
\001\001\255\255\003\001\004\001\005\001\255\255\045\001\046\001\
\255\255\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\021\001\255\255\061\001\255\255\
\063\001\255\255\255\255\066\001\255\255\068\001\031\001\070\001\
\255\255\034\001\255\255\036\001\255\255\076\001\077\001\255\255\
\255\255\255\255\255\255\255\255\045\001\046\001\255\255\255\255\
\001\001\255\255\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\061\001\255\255\063\001\255\255\
\255\255\066\001\019\001\068\001\021\001\070\001\255\255\255\255\
\255\255\255\255\255\255\076\001\077\001\255\255\031\001\255\255\
\255\255\034\001\255\255\036\001\255\255\255\255\001\001\255\255\
\003\001\004\001\005\001\255\255\045\001\046\001\255\255\255\255\
\255\255\012\001\001\001\255\255\003\001\004\001\005\001\255\255\
\255\255\255\255\021\001\255\255\061\001\255\255\063\001\255\255\
\255\255\066\001\255\255\068\001\031\001\070\001\021\001\034\001\
\255\255\036\001\255\255\076\001\077\001\255\255\255\255\255\255\
\031\001\255\255\045\001\046\001\035\001\036\001\001\001\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\045\001\046\001\
\255\255\255\255\061\001\255\255\063\001\255\255\255\255\066\001\
\255\255\068\001\021\001\070\001\255\255\255\255\061\001\255\255\
\255\255\076\001\077\001\066\001\031\001\068\001\255\255\070\001\
\255\255\255\255\255\255\255\255\255\255\076\001\077\001\255\255\
\255\255\255\255\045\001\046\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\255\255\066\001\
\255\255\068\001\255\255\070\001\255\255\000\001\001\001\002\001\
\255\255\076\001\077\001\006\001\255\255\008\001\009\001\255\255\
\011\001\255\255\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\255\255\
\035\001\255\255\037\001\255\255\039\001\040\001\041\001\042\001\
\255\255\044\001\255\255\255\255\255\255\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\001\001\002\001\255\255\062\001\255\255\006\001\255\255\255\255\
\067\001\010\001\255\255\255\255\255\255\255\255\073\001\074\001\
\255\255\002\001\255\255\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\027\001\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\255\255\036\001\255\255\255\255\039\001\040\001\
\255\255\255\255\027\001\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\039\001\040\001\
\255\255\255\255\059\001\255\255\255\255\255\255\063\001\064\001\
\255\255\066\001\001\001\002\001\053\001\054\001\005\001\006\001\
\255\255\008\001\009\001\255\255\011\001\255\255\013\001\014\001\
\015\001\255\255\255\255\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\255\255\032\001\033\001\255\255\035\001\255\255\037\001\255\255\
\039\001\040\001\041\001\042\001\255\255\044\001\255\255\255\255\
\255\255\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\001\001\002\001\255\255\255\255\062\001\
\006\001\255\255\008\001\009\001\255\255\011\001\255\255\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\255\255\032\001\033\001\255\255\035\001\255\255\037\001\
\255\255\039\001\040\001\041\001\042\001\255\255\044\001\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\001\001\002\001\255\255\255\255\
\062\001\006\001\255\255\255\255\009\001\255\255\011\001\255\255\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\255\255\032\001\033\001\255\255\035\001\255\255\
\037\001\255\255\039\001\040\001\041\001\042\001\255\255\044\001\
\255\255\255\255\255\255\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\001\001\002\001\255\255\
\255\255\062\001\006\001\255\255\255\255\009\001\255\255\011\001\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\255\255\030\001\255\255\032\001\033\001\255\255\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\255\255\
\044\001\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\255\255\057\001\001\001\002\001\
\255\255\255\255\062\001\006\001\255\255\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\255\255\030\001\255\255\032\001\033\001\255\255\
\035\001\255\255\255\255\255\255\039\001\040\001\041\001\042\001\
\255\255\044\001\255\255\255\255\255\255\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\255\255\057\001\001\001\
\002\001\255\255\255\255\062\001\006\001\255\255\255\255\009\001\
\255\255\011\001\255\255\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\028\001\255\255\030\001\255\255\032\001\033\001\
\255\255\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\255\255\044\001\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\001\001\057\001\
\255\255\255\255\255\255\255\255\062\001\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\028\001\255\255\255\255\255\255\032\001\033\001\009\001\
\035\001\011\001\255\255\013\001\014\001\015\001\041\001\042\001\
\255\255\044\001\020\001\255\255\255\255\048\001\049\001\050\001\
\051\001\052\001\028\001\255\255\055\001\255\255\057\001\033\001\
\255\255\035\001\255\255\062\001\255\255\255\255\255\255\041\001\
\042\001\255\255\044\001\255\255\001\001\255\255\048\001\049\001\
\050\001\051\001\052\001\255\255\009\001\055\001\011\001\057\001\
\013\001\014\001\015\001\255\255\062\001\255\255\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\028\001\
\255\255\255\255\255\255\032\001\033\001\009\001\035\001\011\001\
\255\255\013\001\014\001\015\001\255\255\042\001\255\255\044\001\
\020\001\255\255\255\255\255\255\049\001\050\001\051\001\052\001\
\028\001\255\255\055\001\255\255\057\001\033\001\255\255\035\001\
\255\255\062\001\255\255\255\255\255\255\255\255\042\001\255\255\
\044\001\255\255\001\001\255\255\255\255\049\001\050\001\051\001\
\052\001\255\255\009\001\055\001\011\001\057\001\013\001\014\001\
\015\001\255\255\062\001\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\001\001\255\255\028\001\255\255\255\255\
\255\255\255\255\033\001\009\001\035\001\011\001\255\255\013\001\
\014\001\015\001\255\255\042\001\255\255\044\001\020\001\255\255\
\255\255\255\255\049\001\050\001\051\001\052\001\028\001\255\255\
\055\001\255\255\057\001\033\001\255\255\035\001\255\255\062\001\
\255\255\002\001\255\255\255\255\042\001\006\001\044\001\255\255\
\001\001\255\255\255\255\049\001\050\001\051\001\052\001\255\255\
\009\001\055\001\011\001\057\001\013\001\014\001\015\001\255\255\
\062\001\255\255\027\001\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\255\255\039\001\040\001\
\255\255\255\255\035\001\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\044\001\053\001\054\001\255\255\255\255\
\049\001\050\001\051\001\052\001\255\255\255\255\055\001\255\255\
\255\255\255\255\255\255\255\255\255\255\062\001"

let yynames_const = "\
  ALGORITHM\000\
  AND\000\
  ANNOTATION\000\
  BLOCK\000\
  BREAK\000\
  CLASS\000\
  CONNECT\000\
  CONNECTOR\000\
  CONSTANT\000\
  DISCRETE\000\
  EACH\000\
  ELSE\000\
  ELSEIF\000\
  ELSEWHEN\000\
  ENCAPSULATED\000\
  END\000\
  END_IF\000\
  END_FOR\000\
  END_WHEN\000\
  END_WHILE\000\
  ENUMERATION\000\
  EQUATION\000\
  EXPANDABLE\000\
  EXTENDS\000\
  EXTERNAL\000\
  FALSE\000\
  FINAL\000\
  FLOW\000\
  FOR\000\
  FUNCTION\000\
  IF\000\
  IMPORT\000\
  IN\000\
  INITIAL_ALGORITHM\000\
  INITIAL_EQUATION\000\
  INNER\000\
  INPUT\000\
  LOOP\000\
  MODEL\000\
  NOT\000\
  NOEVENT\000\
  OR\000\
  OUTER\000\
  OUTPUT\000\
  PACKAGE\000\
  PARAMETER\000\
  PARTIAL\000\
  PROTECTED\000\
  PUBLIC\000\
  RECORD\000\
  REDECLARE\000\
  REPLACEABLE\000\
  RESTRICTS\000\
  RETURN\000\
  THEN\000\
  TRUE\000\
  TYPE\000\
  WHEN\000\
  WHILE\000\
  WITHIN\000\
  LP\000\
  RP\000\
  LSB\000\
  RSB\000\
  LCB\000\
  RCB\000\
  DOT\000\
  CM\000\
  SC\000\
  CL\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EXP\000\
  EQ\000\
  COLEQ\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  EE\000\
  NE\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  END_IDENT\000\
  UNSIGNED_INTEGER\000\
  UNSIGNED_REAL\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_definitions) in
    Obj.repr(
# 138 "src/translator/parsing/parser.mly"
      ( node (ClassDefinitions (List.rev _1)) )
# 1629 "src/translator/parsing/parser.ml"
               : (location Syntax.toplevel_element_desc, location) Syntax.node))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'toplevel_expression) in
    Obj.repr(
# 140 "src/translator/parsing/parser.mly"
      ( _1 )
# 1636 "src/translator/parsing/parser.ml"
               : (location Syntax.toplevel_element_desc, location) Syntax.node))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "src/translator/parsing/parser.mly"
      ( node (Within []) )
# 1642 "src/translator/parsing/parser.ml"
               : (location Syntax.toplevel_element_desc, location) Syntax.node))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'within_name) in
    Obj.repr(
# 144 "src/translator/parsing/parser.mly"
      ( node (Within (List.rev _2)) )
# 1649 "src/translator/parsing/parser.ml"
               : (location Syntax.toplevel_element_desc, location) Syntax.node))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'import_clause) in
    Obj.repr(
# 146 "src/translator/parsing/parser.mly"
      ( node (Import _1) )
# 1656 "src/translator/parsing/parser.ml"
               : (location Syntax.toplevel_element_desc, location) Syntax.node))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "src/translator/parsing/parser.mly"
      ( raise End_of_file )
# 1662 "src/translator/parsing/parser.ml"
               : (location Syntax.toplevel_element_desc, location) Syntax.node))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'class_definition) in
    Obj.repr(
# 153 "src/translator/parsing/parser.mly"
      ( [node (ClassDefinition (Some Final, _2))] )
# 1669 "src/translator/parsing/parser.ml"
               : 'class_definitions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_definition) in
    Obj.repr(
# 155 "src/translator/parsing/parser.mly"
      ( [node (ClassDefinition (None, _1))] )
# 1676 "src/translator/parsing/parser.ml"
               : 'class_definitions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'class_definitions) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_definition) in
    Obj.repr(
# 157 "src/translator/parsing/parser.mly"
      ( node (ClassDefinition (Some Final, _3)) :: _1 )
# 1684 "src/translator/parsing/parser.ml"
               : 'class_definitions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'class_definitions) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'class_definition) in
    Obj.repr(
# 159 "src/translator/parsing/parser.mly"
      ( node (ClassDefinition (None, _2)) :: _1 )
# 1692 "src/translator/parsing/parser.ml"
               : 'class_definitions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 163 "src/translator/parsing/parser.mly"
      ( node (Expression _1) )
# 1699 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'component_reference) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'component_list) in
    Obj.repr(
# 165 "src/translator/parsing/parser.mly"
      ( match _1.nature with
          | IndexedAccess (type_spec_node, subscripts_node) ->
              node (VariablesDefinitions (type_spec_node, Some subscripts_node, (List.rev _2)))
          | type_spec ->
              node (VariablesDefinitions (rhs_nodes 1 1 type_spec, None, (List.rev _2))) )
# 1711 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 171 "src/translator/parsing/parser.mly"
      ( node (Command (node (Assign (_1, _3)))) )
# 1719 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 173 "src/translator/parsing/parser.mly"
      ( node (Command (node (MultipleAssign (_2, _5, None)))) )
# 1727 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 175 "src/translator/parsing/parser.mly"
      ( node (Command (node (MultipleAssign (_2, _5, Some _7)))) )
# 1736 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 178 "src/translator/parsing/parser.mly"
      ( unclosed "(" 6 ")" 8 )
# 1745 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 180 "src/translator/parsing/parser.mly"
      ( unclosed "(" 6 ")" 7 )
# 1753 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "src/translator/parsing/parser.mly"
      ( node (Command (node Break)) )
# 1759 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "src/translator/parsing/parser.mly"
      ( node (Command (node Return)) )
# 1765 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_equation_a) in
    Obj.repr(
# 186 "src/translator/parsing/parser.mly"
      ( node (Command (node _1)) )
# 1772 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_clause_a) in
    Obj.repr(
# 188 "src/translator/parsing/parser.mly"
      ( node (Command (node _1)) )
# 1779 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_clause) in
    Obj.repr(
# 190 "src/translator/parsing/parser.mly"
      ( node (Command (node _1)) )
# 1786 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'when_clause_a) in
    Obj.repr(
# 192 "src/translator/parsing/parser.mly"
      ( node (Command (node _1)) )
# 1793 "src/translator/parsing/parser.ml"
               : 'toplevel_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 197 "src/translator/parsing/parser.mly"
      ( [_1] )
# 1800 "src/translator/parsing/parser.ml"
               : 'within_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'within_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 199 "src/translator/parsing/parser.mly"
      ( _3 :: _1 )
# 1808 "src/translator/parsing/parser.ml"
               : 'within_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'encapsulated_option) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'partial_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'class_specifier) in
    Obj.repr(
# 205 "src/translator/parsing/parser.mly"
      ( node (Definition (_1, _2, _3, _4)) )
# 1818 "src/translator/parsing/parser.ml"
               : 'class_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "src/translator/parsing/parser.mly"
      ( Class )
# 1824 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "src/translator/parsing/parser.mly"
      ( Model )
# 1830 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 214 "src/translator/parsing/parser.mly"
      ( Block )
# 1836 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "src/translator/parsing/parser.mly"
      ( Record )
# 1842 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 218 "src/translator/parsing/parser.mly"
      ( ExpandableConnector )
# 1848 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "src/translator/parsing/parser.mly"
      ( Connector )
# 1854 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "src/translator/parsing/parser.mly"
      ( Type )
# 1860 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "src/translator/parsing/parser.mly"
      ( Package )
# 1866 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 226 "src/translator/parsing/parser.mly"
      ( Function )
# 1872 "src/translator/parsing/parser.ml"
               : 'class_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "src/translator/parsing/parser.mly"
      ( None )
# 1878 "src/translator/parsing/parser.ml"
               : 'encapsulated_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "src/translator/parsing/parser.mly"
      ( Some Encapsulated )
# 1884 "src/translator/parsing/parser.ml"
               : 'encapsulated_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "src/translator/parsing/parser.mly"
      ( None )
# 1890 "src/translator/parsing/parser.ml"
               : 'partial_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "src/translator/parsing/parser.mly"
      ( Some Partial )
# 1896 "src/translator/parsing/parser.ml"
               : 'partial_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'string_comment) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'composition) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 245 "src/translator/parsing/parser.mly"
      ( if _1 <> _4 then unclosed _1 1 _1 4
        else node (LongSpecifier (_1, _2, _3)) )
# 1907 "src/translator/parsing/parser.ml"
               : 'class_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'base_prefix) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'array_subscripts_option) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'class_modification_option) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 249 "src/translator/parsing/parser.mly"
      ( node (ShortSpecifier (_1, _3, _4, _5, _6, _7)) )
# 1919 "src/translator/parsing/parser.ml"
               : 'class_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'enum_composition_option) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 251 "src/translator/parsing/parser.mly"
      ( node (EnumerationSpecifier (_1, rhs_nodes 5 5 _5, _7)) )
# 1928 "src/translator/parsing/parser.ml"
               : 'class_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'enum_composition_option) in
    Obj.repr(
# 253 "src/translator/parsing/parser.mly"
      ( unclosed "(" 4 ")" 6 )
# 1936 "src/translator/parsing/parser.ml"
               : 'class_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'class_modification_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'string_comment) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'composition) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 255 "src/translator/parsing/parser.mly"
      ( if _2 <> _6 then unclosed _2 2 _2 6
        else node (ExtensionSpecifier (_2, _3, _4, _5)) )
# 1948 "src/translator/parsing/parser.ml"
               : 'class_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_prefix) in
    Obj.repr(
# 261 "src/translator/parsing/parser.mly"
      ( _1 )
# 1955 "src/translator/parsing/parser.ml"
               : 'base_prefix))
; (fun __caml_parser_env ->
    Obj.repr(
# 266 "src/translator/parsing/parser.mly"
      ( EnumList None )
# 1961 "src/translator/parsing/parser.ml"
               : 'enum_composition_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_composition) in
    Obj.repr(
# 268 "src/translator/parsing/parser.mly"
      ( _1 )
# 1968 "src/translator/parsing/parser.ml"
               : 'enum_composition_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum_list) in
    Obj.repr(
# 273 "src/translator/parsing/parser.mly"
      ( EnumList (Some (List.rev _1)) )
# 1975 "src/translator/parsing/parser.ml"
               : 'enum_composition))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "src/translator/parsing/parser.mly"
      ( EnumColon)
# 1981 "src/translator/parsing/parser.ml"
               : 'enum_composition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumeration_literal) in
    Obj.repr(
# 280 "src/translator/parsing/parser.mly"
      ( [_1] )
# 1988 "src/translator/parsing/parser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enumeration_literal) in
    Obj.repr(
# 282 "src/translator/parsing/parser.mly"
      ( _3 :: _1 )
# 1996 "src/translator/parsing/parser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 287 "src/translator/parsing/parser.mly"
      ( node (EnumerationLiteral (_1, _2)) )
# 2004 "src/translator/parsing/parser.ml"
               : 'enumeration_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'other_lists) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'external_option) in
    Obj.repr(
# 292 "src/translator/parsing/parser.mly"
      ( node (Composition ([], List.rev _1, _2)) )
# 2012 "src/translator/parsing/parser.ml"
               : 'composition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'element_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'other_lists) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'external_option) in
    Obj.repr(
# 294 "src/translator/parsing/parser.mly"
      ( node (Composition (List.rev _1, List.rev _2, _3)) )
# 2021 "src/translator/parsing/parser.ml"
               : 'composition))
; (fun __caml_parser_env ->
    Obj.repr(
# 299 "src/translator/parsing/parser.mly"
      ( [] )
# 2027 "src/translator/parsing/parser.ml"
               : 'other_lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'other_lists) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'element_list) in
    Obj.repr(
# 301 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 3 (Public (List.rev _3)) :: _1 )
# 2035 "src/translator/parsing/parser.ml"
               : 'other_lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'other_lists) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'element_list) in
    Obj.repr(
# 303 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 3 (Protected (List.rev _3)) :: _1 )
# 2043 "src/translator/parsing/parser.ml"
               : 'other_lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'other_lists) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'equation_clause) in
    Obj.repr(
# 305 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 2 _2 :: _1 )
# 2051 "src/translator/parsing/parser.ml"
               : 'other_lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'other_lists) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'algorithm_clause) in
    Obj.repr(
# 307 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 2 _2 :: _1 )
# 2059 "src/translator/parsing/parser.ml"
               : 'other_lists))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "src/translator/parsing/parser.mly"
      ( None )
# 2065 "src/translator/parsing/parser.ml"
               : 'external_option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'language_specification_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'external_function_call_option) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 316 "src/translator/parsing/parser.mly"
      ( Some (node (External (_2, _3, None, _5))) )
# 2074 "src/translator/parsing/parser.ml"
               : 'external_option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'language_specification_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'external_function_call_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'annotation) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 320 "src/translator/parsing/parser.mly"
      ( Some (node (External (_2, _3, Some _4, _6))) )
# 2084 "src/translator/parsing/parser.ml"
               : 'external_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 325 "src/translator/parsing/parser.mly"
      ( None )
# 2090 "src/translator/parsing/parser.ml"
               : 'annotation_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annotation) in
    Obj.repr(
# 327 "src/translator/parsing/parser.mly"
      ( Some _1 )
# 2097 "src/translator/parsing/parser.ml"
               : 'annotation_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "src/translator/parsing/parser.mly"
      ( None )
# 2103 "src/translator/parsing/parser.ml"
               : 'annotation_sc_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'annotation) in
    Obj.repr(
# 334 "src/translator/parsing/parser.mly"
      ( Some _1 )
# 2110 "src/translator/parsing/parser.ml"
               : 'annotation_sc_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "src/translator/parsing/parser.mly"
      ( None )
# 2116 "src/translator/parsing/parser.ml"
               : 'language_specification_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 341 "src/translator/parsing/parser.mly"
      ( Some _1 )
# 2123 "src/translator/parsing/parser.ml"
               : 'language_specification_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "src/translator/parsing/parser.mly"
      ( None )
# 2129 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 348 "src/translator/parsing/parser.mly"
      ( Some (node (ExternalFunctionCall (None, _1, []))) )
# 2136 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expressions) in
    Obj.repr(
# 350 "src/translator/parsing/parser.mly"
      ( Some (node (ExternalFunctionCall (None, _1, _3))) )
# 2144 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expressions) in
    Obj.repr(
# 352 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 4 )
# 2152 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 354 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 3 )
# 2159 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 356 "src/translator/parsing/parser.mly"
      ( Some (node (ExternalFunctionCall (Some _1, _3, []))) )
# 2167 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expressions) in
    Obj.repr(
# 358 "src/translator/parsing/parser.mly"
      ( Some (node (ExternalFunctionCall (Some _1, _3, _5))) )
# 2176 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expressions) in
    Obj.repr(
# 360 "src/translator/parsing/parser.mly"
      ( unclosed "(" 4 ")" 6 )
# 2185 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 362 "src/translator/parsing/parser.mly"
      ( unclosed "(" 4 ")" 5 )
# 2193 "src/translator/parsing/parser.ml"
               : 'external_function_call_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 367 "src/translator/parsing/parser.mly"
      ( [_1] )
# 2200 "src/translator/parsing/parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressions) in
    Obj.repr(
# 369 "src/translator/parsing/parser.mly"
      ( _1 :: _3 )
# 2208 "src/translator/parsing/parser.ml"
               : 'expressions))
; (fun __caml_parser_env ->
    Obj.repr(
# 374 "src/translator/parsing/parser.mly"
      ( None )
# 2214 "src/translator/parsing/parser.ml"
               : 'array_subscripts_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_subscripts) in
    Obj.repr(
# 376 "src/translator/parsing/parser.mly"
      ( Some _1 )
# 2221 "src/translator/parsing/parser.ml"
               : 'array_subscripts_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 381 "src/translator/parsing/parser.mly"
      ( None )
# 2227 "src/translator/parsing/parser.ml"
               : 'class_modification_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_modification) in
    Obj.repr(
# 383 "src/translator/parsing/parser.mly"
      ( Some _1 )
# 2234 "src/translator/parsing/parser.ml"
               : 'class_modification_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'annotation) in
    Obj.repr(
# 388 "src/translator/parsing/parser.mly"
      ( [node (ClassAnnotation _1)] )
# 2241 "src/translator/parsing/parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'import_clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 390 "src/translator/parsing/parser.mly"
      ( [node (ImportClause (_1, _3))] )
# 2249 "src/translator/parsing/parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'extends_clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 392 "src/translator/parsing/parser.mly"
      ( [node (ExtendsClause (_1, _3))] )
# 2257 "src/translator/parsing/parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'redeclare_option) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'final_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'dynamic_scope_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'element_definition) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 395 "src/translator/parsing/parser.mly"
      ( [node (ElementDefinition (_1, _2, _3, _4, _6))] )
# 2268 "src/translator/parsing/parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'element_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'import_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 397 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 3 (ImportClause (_2, _4)) :: _1 )
# 2277 "src/translator/parsing/parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'element_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'extends_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 399 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 3 (ExtendsClause (_2, _4)) :: _1 )
# 2286 "src/translator/parsing/parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'element_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'redeclare_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'final_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'dynamic_scope_option) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'element_definition) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 402 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 5 (ElementDefinition (_2, _3, _4, _5, _7)) :: _1 )
# 2298 "src/translator/parsing/parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_definition) in
    Obj.repr(
# 407 "src/translator/parsing/parser.mly"
      ( node (ClassDefinitionElement (None, _1, [])) )
# 2305 "src/translator/parsing/parser.ml"
               : 'element_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'component_clause) in
    Obj.repr(
# 409 "src/translator/parsing/parser.mly"
      ( node (ComponentClauseElement (None, _1, [])) )
# 2312 "src/translator/parsing/parser.ml"
               : 'element_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_definition) in
    Obj.repr(
# 411 "src/translator/parsing/parser.mly"
      ( node (ClassDefinitionElement (Some Replaceable, _2, [])) )
# 2319 "src/translator/parsing/parser.ml"
               : 'element_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'class_definition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constraining_clauses) in
    Obj.repr(
# 413 "src/translator/parsing/parser.mly"
      ( node (ClassDefinitionElement (Some Replaceable, _2, List.rev _3)) )
# 2327 "src/translator/parsing/parser.ml"
               : 'element_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'component_clause) in
    Obj.repr(
# 415 "src/translator/parsing/parser.mly"
      ( node (ComponentClauseElement (Some Replaceable, _2, [])) )
# 2334 "src/translator/parsing/parser.ml"
               : 'element_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'component_clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constraining_clauses) in
    Obj.repr(
# 417 "src/translator/parsing/parser.mly"
      ( node (ComponentClauseElement (Some Replaceable, _2, List.rev _3)) )
# 2342 "src/translator/parsing/parser.ml"
               : 'element_definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 422 "src/translator/parsing/parser.mly"
      ( None )
# 2348 "src/translator/parsing/parser.ml"
               : 'redeclare_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 424 "src/translator/parsing/parser.mly"
      ( Some Redeclare )
# 2354 "src/translator/parsing/parser.ml"
               : 'redeclare_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 429 "src/translator/parsing/parser.mly"
      ( None )
# 2360 "src/translator/parsing/parser.ml"
               : 'final_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 431 "src/translator/parsing/parser.mly"
      ( Some Final )
# 2366 "src/translator/parsing/parser.ml"
               : 'final_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 436 "src/translator/parsing/parser.mly"
      ( None )
# 2372 "src/translator/parsing/parser.ml"
               : 'dynamic_scope_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 438 "src/translator/parsing/parser.mly"
      ( Some Inner )
# 2378 "src/translator/parsing/parser.ml"
               : 'dynamic_scope_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 440 "src/translator/parsing/parser.mly"
      ( Some Outer )
# 2384 "src/translator/parsing/parser.ml"
               : 'dynamic_scope_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 442 "src/translator/parsing/parser.mly"
      ( Some InnerOuter )
# 2390 "src/translator/parsing/parser.ml"
               : 'dynamic_scope_option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 447 "src/translator/parsing/parser.mly"
      ( node (NewIdentifier (_2, _4, _5)) )
# 2399 "src/translator/parsing/parser.ml"
               : 'import_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 449 "src/translator/parsing/parser.mly"
      ( node (OldIdentifier (_2, _3)) )
# 2407 "src/translator/parsing/parser.ml"
               : 'import_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 451 "src/translator/parsing/parser.mly"
      ( node (AllIdentifiers (_2, _5)) )
# 2415 "src/translator/parsing/parser.ml"
               : 'import_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constraining_clause) in
    Obj.repr(
# 456 "src/translator/parsing/parser.mly"
      ( [_1] )
# 2422 "src/translator/parsing/parser.ml"
               : 'constraining_clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constraining_clauses) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constraining_clause) in
    Obj.repr(
# 458 "src/translator/parsing/parser.mly"
      ( _2 :: _1 )
# 2430 "src/translator/parsing/parser.ml"
               : 'constraining_clauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_modification_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_option) in
    Obj.repr(
# 464 "src/translator/parsing/parser.mly"
      ( node (Extends (_2, _3, _4)) )
# 2439 "src/translator/parsing/parser.ml"
               : 'extends_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_modification_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 469 "src/translator/parsing/parser.mly"
      ( node (Constraint (Extension, _2, _3, _4)) )
# 2448 "src/translator/parsing/parser.ml"
               : 'constraining_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'class_modification_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 471 "src/translator/parsing/parser.mly"
      ( node (Constraint (Restriction, _2, _3, _4)) )
# 2457 "src/translator/parsing/parser.ml"
               : 'constraining_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'type_prefix) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_specifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'array_subscripts_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'component_list) in
    Obj.repr(
# 477 "src/translator/parsing/parser.mly"
      ( node (ComponentClause (_1, _2, _3, List.rev _4)) )
# 2467 "src/translator/parsing/parser.ml"
               : 'component_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'flow_option) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variability_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'inout_option) in
    Obj.repr(
# 482 "src/translator/parsing/parser.mly"
      ( node (TypePrefix (_1, _2, _3)) )
# 2476 "src/translator/parsing/parser.ml"
               : 'type_prefix))
; (fun __caml_parser_env ->
    Obj.repr(
# 487 "src/translator/parsing/parser.mly"
      ( None )
# 2482 "src/translator/parsing/parser.ml"
               : 'flow_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 489 "src/translator/parsing/parser.mly"
      ( Some Flow )
# 2488 "src/translator/parsing/parser.ml"
               : 'flow_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 494 "src/translator/parsing/parser.mly"
      ( None )
# 2494 "src/translator/parsing/parser.ml"
               : 'variability_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 496 "src/translator/parsing/parser.mly"
      ( Some Discrete )
# 2500 "src/translator/parsing/parser.ml"
               : 'variability_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 498 "src/translator/parsing/parser.mly"
      ( Some Parameter )
# 2506 "src/translator/parsing/parser.ml"
               : 'variability_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 500 "src/translator/parsing/parser.mly"
      ( Some Constant )
# 2512 "src/translator/parsing/parser.ml"
               : 'variability_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 505 "src/translator/parsing/parser.mly"
      ( None )
# 2518 "src/translator/parsing/parser.ml"
               : 'inout_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 507 "src/translator/parsing/parser.mly"
      ( Some Input )
# 2524 "src/translator/parsing/parser.ml"
               : 'inout_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 509 "src/translator/parsing/parser.mly"
      ( Some Output )
# 2530 "src/translator/parsing/parser.ml"
               : 'inout_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 514 "src/translator/parsing/parser.mly"
      ( _1 )
# 2537 "src/translator/parsing/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'component_declaration) in
    Obj.repr(
# 519 "src/translator/parsing/parser.mly"
      ( [_1] )
# 2544 "src/translator/parsing/parser.ml"
               : 'component_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'component_declaration) in
    Obj.repr(
# 521 "src/translator/parsing/parser.mly"
      ( _3 :: _1 )
# 2552 "src/translator/parsing/parser.ml"
               : 'component_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 526 "src/translator/parsing/parser.mly"
      ( node (ComponentDeclaration (_1, _2)) )
# 2560 "src/translator/parsing/parser.ml"
               : 'component_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'array_subscripts_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'modification_option) in
    Obj.repr(
# 531 "src/translator/parsing/parser.mly"
      ( node (Declaration (_1, _2, _3)) )
# 2569 "src/translator/parsing/parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 536 "src/translator/parsing/parser.mly"
      ( None )
# 2575 "src/translator/parsing/parser.ml"
               : 'modification_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'modification) in
    Obj.repr(
# 538 "src/translator/parsing/parser.mly"
      ( Some _1 )
# 2582 "src/translator/parsing/parser.ml"
               : 'modification_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'class_modification) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 544 "src/translator/parsing/parser.mly"
      ( node (Modification (_1, Some _3)) )
# 2590 "src/translator/parsing/parser.ml"
               : 'modification))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_modification) in
    Obj.repr(
# 546 "src/translator/parsing/parser.mly"
      ( node (Modification (_1, None)) )
# 2597 "src/translator/parsing/parser.ml"
               : 'modification))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 548 "src/translator/parsing/parser.mly"
      ( node (Eq _2) )
# 2604 "src/translator/parsing/parser.ml"
               : 'modification))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 550 "src/translator/parsing/parser.mly"
      ( node (ColEq _2) )
# 2611 "src/translator/parsing/parser.ml"
               : 'modification))
; (fun __caml_parser_env ->
    Obj.repr(
# 555 "src/translator/parsing/parser.mly"
      ( node (ClassModification []) )
# 2617 "src/translator/parsing/parser.ml"
               : 'class_modification))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'argument_list) in
    Obj.repr(
# 557 "src/translator/parsing/parser.mly"
      ( node (ClassModification (List.rev _2)) )
# 2624 "src/translator/parsing/parser.ml"
               : 'class_modification))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'argument_list) in
    Obj.repr(
# 559 "src/translator/parsing/parser.mly"
      ( unclosed "(" 1 ")" 3 )
# 2631 "src/translator/parsing/parser.ml"
               : 'class_modification))
; (fun __caml_parser_env ->
    Obj.repr(
# 561 "src/translator/parsing/parser.mly"
      ( unclosed "(" 1 ")" 2 )
# 2637 "src/translator/parsing/parser.ml"
               : 'class_modification))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argument) in
    Obj.repr(
# 566 "src/translator/parsing/parser.mly"
      ( [_1] )
# 2644 "src/translator/parsing/parser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'argument) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argument_list) in
    Obj.repr(
# 568 "src/translator/parsing/parser.mly"
      ( _1 :: _3 )
# 2652 "src/translator/parsing/parser.ml"
               : 'argument_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'element_modification) in
    Obj.repr(
# 573 "src/translator/parsing/parser.mly"
      ( _1 )
# 2659 "src/translator/parsing/parser.ml"
               : 'argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'element_redeclaration) in
    Obj.repr(
# 575 "src/translator/parsing/parser.mly"
      ( _1 )
# 2666 "src/translator/parsing/parser.ml"
               : 'argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'each_option) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'final_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'modification_option) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'string_comment) in
    Obj.repr(
# 581 "src/translator/parsing/parser.mly"
      ( node (ElementModification (_1, _2, _3, _4, _5)) )
# 2677 "src/translator/parsing/parser.ml"
               : 'element_modification))
; (fun __caml_parser_env ->
    Obj.repr(
# 586 "src/translator/parsing/parser.mly"
      ( None )
# 2683 "src/translator/parsing/parser.ml"
               : 'each_option))
; (fun __caml_parser_env ->
    Obj.repr(
# 588 "src/translator/parsing/parser.mly"
      ( Some Each )
# 2689 "src/translator/parsing/parser.ml"
               : 'each_option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'each_option) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'final_option) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'class_definition_or_component_clause1) in
    Obj.repr(
# 593 "src/translator/parsing/parser.mly"
      ( node (ElementRedeclaration (_2, _3, _4)) )
# 2698 "src/translator/parsing/parser.ml"
               : 'element_redeclaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_definition) in
    Obj.repr(
# 598 "src/translator/parsing/parser.mly"
      ( node (ClassDefinitionElement (None, _1, [])) )
# 2705 "src/translator/parsing/parser.ml"
               : 'class_definition_or_component_clause1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_prefix) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_specifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'component_declaration) in
    Obj.repr(
# 600 "src/translator/parsing/parser.mly"
      ( let cpnt = node (ComponentClause (_1, _2, None, [_3])) in
        node (ComponentClauseElement (None, cpnt, [])) )
# 2715 "src/translator/parsing/parser.ml"
               : 'class_definition_or_component_clause1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_definition) in
    Obj.repr(
# 603 "src/translator/parsing/parser.mly"
      ( node (ClassDefinitionElement (Some Replaceable, _2, [])) )
# 2722 "src/translator/parsing/parser.ml"
               : 'class_definition_or_component_clause1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'class_definition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constraining_clauses) in
    Obj.repr(
# 605 "src/translator/parsing/parser.mly"
      ( node (ClassDefinitionElement (Some Replaceable, _2, List.rev _3)) )
# 2730 "src/translator/parsing/parser.ml"
               : 'class_definition_or_component_clause1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_specifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'component_declaration) in
    Obj.repr(
# 608 "src/translator/parsing/parser.mly"
      ( let cpnt = node (ComponentClause (_2, _3, None, [_4])) in
        node (ComponentClauseElement (Some Replaceable, cpnt, [])) )
# 2740 "src/translator/parsing/parser.ml"
               : 'class_definition_or_component_clause1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'type_prefix) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_specifier) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'component_declaration) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'constraining_clauses) in
    Obj.repr(
# 612 "src/translator/parsing/parser.mly"
      ( let cpnt = node (ComponentClause (_2, _3, None, [_4])) in
        node (ComponentClauseElement (Some Replaceable, cpnt, List.rev _5)) )
# 2751 "src/translator/parsing/parser.ml"
               : 'class_definition_or_component_clause1))
; (fun __caml_parser_env ->
    Obj.repr(
# 619 "src/translator/parsing/parser.mly"
      ( EquationClause (Some Initial, []) )
# 2757 "src/translator/parsing/parser.ml"
               : 'equation_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'equations) in
    Obj.repr(
# 621 "src/translator/parsing/parser.mly"
      ( EquationClause (Some Initial, List.rev _2) )
# 2764 "src/translator/parsing/parser.ml"
               : 'equation_clause))
; (fun __caml_parser_env ->
    Obj.repr(
# 623 "src/translator/parsing/parser.mly"
      ( EquationClause (None, []) )
# 2770 "src/translator/parsing/parser.ml"
               : 'equation_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'equations) in
    Obj.repr(
# 625 "src/translator/parsing/parser.mly"
      ( EquationClause (None, List.rev _2) )
# 2777 "src/translator/parsing/parser.ml"
               : 'equation_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'equation) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'comment) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 629 "src/translator/parsing/parser.mly"
      ( [node (Equation (rhs_nodes 1 3 _1, _2, _4))] )
# 2786 "src/translator/parsing/parser.ml"
               : 'equations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'equations) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'equation) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'comment) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 631 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 5 (Equation (rhs_nodes 2 4 _2, _3, _5)) :: _1 )
# 2796 "src/translator/parsing/parser.ml"
               : 'equations))
; (fun __caml_parser_env ->
    Obj.repr(
# 636 "src/translator/parsing/parser.mly"
      ( AlgorithmClause (Some Initial, []) )
# 2802 "src/translator/parsing/parser.ml"
               : 'algorithm_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'algorithms) in
    Obj.repr(
# 638 "src/translator/parsing/parser.mly"
      ( AlgorithmClause (Some Initial, List.rev _2) )
# 2809 "src/translator/parsing/parser.ml"
               : 'algorithm_clause))
; (fun __caml_parser_env ->
    Obj.repr(
# 640 "src/translator/parsing/parser.mly"
      ( AlgorithmClause (None, []) )
# 2815 "src/translator/parsing/parser.ml"
               : 'algorithm_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'algorithms) in
    Obj.repr(
# 642 "src/translator/parsing/parser.mly"
      ( AlgorithmClause (None, List.rev _2) )
# 2822 "src/translator/parsing/parser.ml"
               : 'algorithm_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'algorithm) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'comment) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 647 "src/translator/parsing/parser.mly"
      ( [node (Algorithm (rhs_nodes 1 3 _1, _2, _4))] )
# 2831 "src/translator/parsing/parser.ml"
               : 'algorithms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'algorithms) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'algorithm) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'comment) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_sc_option) in
    Obj.repr(
# 649 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 5 (Algorithm (rhs_nodes 2 4 _2, _3, _5)) :: _1 )
# 2841 "src/translator/parsing/parser.ml"
               : 'algorithms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 654 "src/translator/parsing/parser.mly"
      ( Equal (_1, _3) )
# 2849 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_equation_e) in
    Obj.repr(
# 656 "src/translator/parsing/parser.mly"
      ( _1 )
# 2856 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_clause_e) in
    Obj.repr(
# 658 "src/translator/parsing/parser.mly"
      ( _1 )
# 2863 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'connect_clause) in
    Obj.repr(
# 660 "src/translator/parsing/parser.mly"
      ( _1 )
# 2870 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'when_clause_e) in
    Obj.repr(
# 662 "src/translator/parsing/parser.mly"
      ( _1 )
# 2877 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 664 "src/translator/parsing/parser.mly"
      ( FunctionCallE (_1, None) )
# 2884 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 666 "src/translator/parsing/parser.mly"
      ( FunctionCallE (_1, Some _3) )
# 2892 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 668 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 4 )
# 2900 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 670 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 3 )
# 2907 "src/translator/parsing/parser.ml"
               : 'equation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 675 "src/translator/parsing/parser.mly"
      ( Assign (_1, _3) )
# 2915 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 677 "src/translator/parsing/parser.mly"
      ( FunctionCallA (_1, None) )
# 2922 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 679 "src/translator/parsing/parser.mly"
      ( FunctionCallA (_1, Some _3) )
# 2930 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 681 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 4 )
# 2938 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 683 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 3 )
# 2945 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 685 "src/translator/parsing/parser.mly"
      ( MultipleAssign (_2, _5, None) )
# 2953 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 687 "src/translator/parsing/parser.mly"
      ( MultipleAssign ([], _4, None) )
# 2960 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 689 "src/translator/parsing/parser.mly"
      ( MultipleAssign (_2, _5, Some _7) )
# 2969 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 691 "src/translator/parsing/parser.mly"
      ( MultipleAssign ([], _4, Some _6) )
# 2977 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 694 "src/translator/parsing/parser.mly"
      ( unclosed "(" 6 ")" 8 )
# 2986 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 696 "src/translator/parsing/parser.mly"
      ( unclosed "(" 5 ")" 7 )
# 2994 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 698 "src/translator/parsing/parser.mly"
      ( unclosed "(" 6 ")" 7 )
# 3002 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 700 "src/translator/parsing/parser.mly"
      ( unclosed "(" 5 ")" 6 )
# 3009 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 702 "src/translator/parsing/parser.mly"
      ( unclosed "(" 1 ")" 3 )
# 3016 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    Obj.repr(
# 704 "src/translator/parsing/parser.mly"
      ( unclosed "(" 1 ")" 2 )
# 3022 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    Obj.repr(
# 706 "src/translator/parsing/parser.mly"
      ( Break )
# 3028 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    Obj.repr(
# 708 "src/translator/parsing/parser.mly"
      ( Return )
# 3034 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_equation_a) in
    Obj.repr(
# 710 "src/translator/parsing/parser.mly"
      ( _1 )
# 3041 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_clause_a) in
    Obj.repr(
# 712 "src/translator/parsing/parser.mly"
      ( _1 )
# 3048 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_clause) in
    Obj.repr(
# 714 "src/translator/parsing/parser.mly"
      ( _1 )
# 3055 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'when_clause_a) in
    Obj.repr(
# 716 "src/translator/parsing/parser.mly"
      ( _1 )
# 3062 "src/translator/parsing/parser.ml"
               : 'algorithm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'equations_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'else_if_expressions_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'else_option_e) in
    Obj.repr(
# 725 "src/translator/parsing/parser.mly"
      ( ConditionalEquationE ((_2, List.rev _4) :: _5, _6) )
# 3072 "src/translator/parsing/parser.ml"
               : 'conditional_equation_e))
; (fun __caml_parser_env ->
    Obj.repr(
# 730 "src/translator/parsing/parser.mly"
      ( [] )
# 3078 "src/translator/parsing/parser.ml"
               : 'else_if_expressions_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'equations_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_if_expressions_e) in
    Obj.repr(
# 734 "src/translator/parsing/parser.mly"
      ( (_2, List.rev _4) :: _5 )
# 3087 "src/translator/parsing/parser.ml"
               : 'else_if_expressions_e))
; (fun __caml_parser_env ->
    Obj.repr(
# 739 "src/translator/parsing/parser.mly"
      ( None )
# 3093 "src/translator/parsing/parser.ml"
               : 'else_option_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'equations_e) in
    Obj.repr(
# 741 "src/translator/parsing/parser.mly"
      ( Some (List.rev _2) )
# 3100 "src/translator/parsing/parser.ml"
               : 'else_option_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'equation) in
    Obj.repr(
# 746 "src/translator/parsing/parser.mly"
      ( [node _1] )
# 3107 "src/translator/parsing/parser.ml"
               : 'equations_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equations_e) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'equation) in
    Obj.repr(
# 748 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 3 _2 :: _1 )
# 3115 "src/translator/parsing/parser.ml"
               : 'equations_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'algorithms_a) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'else_if_expressions_a) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'else_option_a) in
    Obj.repr(
# 757 "src/translator/parsing/parser.mly"
      ( ConditionalEquationA ((_2, List.rev _4) :: _5, _6) )
# 3125 "src/translator/parsing/parser.ml"
               : 'conditional_equation_a))
; (fun __caml_parser_env ->
    Obj.repr(
# 762 "src/translator/parsing/parser.mly"
      ( [] )
# 3131 "src/translator/parsing/parser.ml"
               : 'else_if_expressions_a))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'algorithms_a) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_if_expressions_a) in
    Obj.repr(
# 766 "src/translator/parsing/parser.mly"
      ( (_2, List.rev _4) :: _5 )
# 3140 "src/translator/parsing/parser.ml"
               : 'else_if_expressions_a))
; (fun __caml_parser_env ->
    Obj.repr(
# 771 "src/translator/parsing/parser.mly"
      ( None )
# 3146 "src/translator/parsing/parser.ml"
               : 'else_option_a))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'algorithms_a) in
    Obj.repr(
# 773 "src/translator/parsing/parser.mly"
      ( Some (List.rev _2) )
# 3153 "src/translator/parsing/parser.ml"
               : 'else_option_a))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'algorithm) in
    Obj.repr(
# 778 "src/translator/parsing/parser.mly"
      ( [node _1] )
# 3160 "src/translator/parsing/parser.ml"
               : 'algorithms_a))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'algorithms_a) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'algorithm) in
    Obj.repr(
# 780 "src/translator/parsing/parser.mly"
      ( rhs_nodes 2 3 _2 :: _1 )
# 3168 "src/translator/parsing/parser.ml"
               : 'algorithms_a))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'for_indices) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'equations_e) in
    Obj.repr(
# 787 "src/translator/parsing/parser.mly"
      ( ForClauseE (_2, List.rev _4) )
# 3176 "src/translator/parsing/parser.ml"
               : 'for_clause_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'for_indices) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'algorithms_a) in
    Obj.repr(
# 794 "src/translator/parsing/parser.mly"
      ( ForClauseA (_2, List.rev _4) )
# 3184 "src/translator/parsing/parser.ml"
               : 'for_clause_a))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_index) in
    Obj.repr(
# 799 "src/translator/parsing/parser.mly"
      ( [_1] )
# 3191 "src/translator/parsing/parser.ml"
               : 'for_indices))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'for_index) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'for_indices) in
    Obj.repr(
# 801 "src/translator/parsing/parser.mly"
      ( _1 :: _3 )
# 3199 "src/translator/parsing/parser.ml"
               : 'for_indices))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 806 "src/translator/parsing/parser.mly"
      ( (_1, None) )
# 3206 "src/translator/parsing/parser.ml"
               : 'for_index))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 808 "src/translator/parsing/parser.mly"
      ( (_1, Some _3) )
# 3214 "src/translator/parsing/parser.ml"
               : 'for_index))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'algorithms_a) in
    Obj.repr(
# 815 "src/translator/parsing/parser.mly"
      ( WhileClause (_2, List.rev _4) )
# 3222 "src/translator/parsing/parser.ml"
               : 'while_clause))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'equations_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'else_when_expressions_e) in
    Obj.repr(
# 823 "src/translator/parsing/parser.mly"
      ( WhenClauseE ((_2, List.rev _4) :: _5) )
# 3231 "src/translator/parsing/parser.ml"
               : 'when_clause_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'algorithms_a) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'else_when_expressions_a) in
    Obj.repr(
# 831 "src/translator/parsing/parser.mly"
      ( WhenClauseA ((_2, List.rev _4) :: _5) )
# 3240 "src/translator/parsing/parser.ml"
               : 'when_clause_a))
; (fun __caml_parser_env ->
    Obj.repr(
# 836 "src/translator/parsing/parser.mly"
      ( [] )
# 3246 "src/translator/parsing/parser.ml"
               : 'else_when_expressions_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'equations_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_when_expressions_e) in
    Obj.repr(
# 840 "src/translator/parsing/parser.mly"
      ( (_2, List.rev _4) :: _5 )
# 3255 "src/translator/parsing/parser.ml"
               : 'else_when_expressions_e))
; (fun __caml_parser_env ->
    Obj.repr(
# 845 "src/translator/parsing/parser.mly"
      ( [] )
# 3261 "src/translator/parsing/parser.ml"
               : 'else_when_expressions_a))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'algorithms_a) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_when_expressions_a) in
    Obj.repr(
# 849 "src/translator/parsing/parser.mly"
      ( (_2, List.rev _4) :: _5 )
# 3270 "src/translator/parsing/parser.ml"
               : 'else_when_expressions_a))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'component_reference) in
    Obj.repr(
# 854 "src/translator/parsing/parser.mly"
      ( ConnectClause (_3, _5) )
# 3278 "src/translator/parsing/parser.ml"
               : 'connect_clause))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'component_reference) in
    Obj.repr(
# 856 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 6 )
# 3286 "src/translator/parsing/parser.ml"
               : 'connect_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expression) in
    Obj.repr(
# 862 "src/translator/parsing/parser.mly"
      ( _1 )
# 3293 "src/translator/parsing/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'elseifs_option) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 866 "src/translator/parsing/parser.mly"
      ( node (If ((_2, _4) :: _5, _7)) )
# 3303 "src/translator/parsing/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 871 "src/translator/parsing/parser.mly"
      ( [] )
# 3309 "src/translator/parsing/parser.ml"
               : 'elseifs_option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elseifs_option) in
    Obj.repr(
# 874 "src/translator/parsing/parser.mly"
      ( (_2, _4) :: _5 )
# 3318 "src/translator/parsing/parser.ml"
               : 'elseifs_option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_expression) in
    Obj.repr(
# 879 "src/translator/parsing/parser.mly"
      ( _1 )
# 3325 "src/translator/parsing/parser.ml"
               : 'simple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_expression) in
    Obj.repr(
# 881 "src/translator/parsing/parser.mly"
      ( node (Range (_1, None, _3)) )
# 3333 "src/translator/parsing/parser.ml"
               : 'simple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'logical_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'logical_expression) in
    Obj.repr(
# 883 "src/translator/parsing/parser.mly"
      ( node (Range (_1, Some _3, _5)) )
# 3342 "src/translator/parsing/parser.ml"
               : 'simple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_term) in
    Obj.repr(
# 888 "src/translator/parsing/parser.mly"
      ( _1 )
# 3349 "src/translator/parsing/parser.ml"
               : 'logical_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_term) in
    Obj.repr(
# 890 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Or, _1, _3)) )
# 3357 "src/translator/parsing/parser.ml"
               : 'logical_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_factor) in
    Obj.repr(
# 895 "src/translator/parsing/parser.mly"
      ( _1 )
# 3364 "src/translator/parsing/parser.ml"
               : 'logical_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_factor) in
    Obj.repr(
# 897 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 And, _1, _3)) )
# 3372 "src/translator/parsing/parser.ml"
               : 'logical_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relation) in
    Obj.repr(
# 902 "src/translator/parsing/parser.mly"
      ( _1 )
# 3379 "src/translator/parsing/parser.ml"
               : 'logical_factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'relation) in
    Obj.repr(
# 904 "src/translator/parsing/parser.mly"
      ( node (UnaryOperation (rhs_nodes 1 1 Not, _2)) )
# 3386 "src/translator/parsing/parser.ml"
               : 'logical_factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 909 "src/translator/parsing/parser.mly"
      ( _1 )
# 3393 "src/translator/parsing/parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 911 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Less, _1, _3)) )
# 3401 "src/translator/parsing/parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 913 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Greater, _1, _3)) )
# 3409 "src/translator/parsing/parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 915 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 LessEqual, _1, _3)) )
# 3417 "src/translator/parsing/parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 917 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 GreaterEqual, _1, _3)) )
# 3425 "src/translator/parsing/parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 919 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 EqualEqual, _1, _3)) )
# 3433 "src/translator/parsing/parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 921 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 NotEqual, _1, _3)) )
# 3441 "src/translator/parsing/parser.ml"
               : 'relation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 926 "src/translator/parsing/parser.mly"
      ( _1 )
# 3448 "src/translator/parsing/parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 928 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Plus, _1, _3)) )
# 3456 "src/translator/parsing/parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 930 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Minus, _1, _3)) )
# 3464 "src/translator/parsing/parser.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_factor) in
    Obj.repr(
# 935 "src/translator/parsing/parser.mly"
      ( _1 )
# 3471 "src/translator/parsing/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unary_factor) in
    Obj.repr(
# 937 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Times, _1, _3)) )
# 3479 "src/translator/parsing/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unary_factor) in
    Obj.repr(
# 939 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Divide, _1, _3)) )
# 3487 "src/translator/parsing/parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 944 "src/translator/parsing/parser.mly"
      ( _1 )
# 3494 "src/translator/parsing/parser.ml"
               : 'unary_factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_factor) in
    Obj.repr(
# 946 "src/translator/parsing/parser.mly"
      ( node (UnaryOperation (rhs_nodes 1 1 UnaryPlus, _2)) )
# 3501 "src/translator/parsing/parser.ml"
               : 'unary_factor))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_factor) in
    Obj.repr(
# 948 "src/translator/parsing/parser.mly"
      ( node (UnaryOperation (rhs_nodes 1 1 UnaryMinus, _2)) )
# 3508 "src/translator/parsing/parser.ml"
               : 'unary_factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary) in
    Obj.repr(
# 952 "src/translator/parsing/parser.mly"
      ( _1 )
# 3515 "src/translator/parsing/parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'primary) in
    Obj.repr(
# 954 "src/translator/parsing/parser.mly"
      ( node (BinaryOperation (rhs_nodes 2 2 Power, _1, _3)) )
# 3523 "src/translator/parsing/parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 959 "src/translator/parsing/parser.mly"
      ( node (Integer _1) )
# 3530 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 961 "src/translator/parsing/parser.mly"
      ( node (Real _1) )
# 3537 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 963 "src/translator/parsing/parser.mly"
      ( node (String _1) )
# 3544 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 965 "src/translator/parsing/parser.mly"
      ( node False )
# 3550 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 967 "src/translator/parsing/parser.mly"
      ( node True )
# 3556 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 969 "src/translator/parsing/parser.mly"
      ( node (NoEvent _3) )
# 3563 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'component_reference) in
    Obj.repr(
# 971 "src/translator/parsing/parser.mly"
      ( _1 )
# 3570 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 973 "src/translator/parsing/parser.mly"
      ( node (FunctionCall (_1, None)) )
# 3577 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 975 "src/translator/parsing/parser.mly"
      ( node (FunctionCall (_1, Some _3)) )
# 3585 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 977 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 4 )
# 3593 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    Obj.repr(
# 979 "src/translator/parsing/parser.mly"
      ( unclosed "(" 2 ")" 3 )
# 3600 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 981 "src/translator/parsing/parser.mly"
      ( match _2 with
          | [expr] -> node expr.Syntax.nature
          | _ -> node (Tuple _2) )
# 3609 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 985 "src/translator/parsing/parser.mly"
      ( unclosed "(" 1 ")" 3 )
# 3616 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_lists) in
    Obj.repr(
# 987 "src/translator/parsing/parser.mly"
      ( node (MatrixConstruction _2) )
# 3623 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 989 "src/translator/parsing/parser.mly"
      ( invalid_matrix_construction 1 2 )
# 3629 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'vector_elements) in
    Obj.repr(
# 991 "src/translator/parsing/parser.mly"
      ( node (Vector _2) )
# 3636 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 993 "src/translator/parsing/parser.mly"
      ( invalid_literal_array_construction 1 2 )
# 3642 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    Obj.repr(
# 995 "src/translator/parsing/parser.mly"
      ( node End )
# 3648 "src/translator/parsing/parser.ml"
               : 'primary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 1000 "src/translator/parsing/parser.mly"
      ( [_1] )
# 3655 "src/translator/parsing/parser.ml"
               : 'expression_lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_lists) in
    Obj.repr(
# 1002 "src/translator/parsing/parser.mly"
      ( _1 :: _3 )
# 3663 "src/translator/parsing/parser.ml"
               : 'expression_lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'for_indices) in
    Obj.repr(
# 1007 "src/translator/parsing/parser.mly"
      ( node (VectorReduction (_1, _3)) )
# 3671 "src/translator/parsing/parser.ml"
               : 'vector_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 1009 "src/translator/parsing/parser.mly"
      ( node (VectorElements _1) )
# 3678 "src/translator/parsing/parser.ml"
               : 'vector_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1014 "src/translator/parsing/parser.mly"
      ( node (Identifier _1) )
# 3685 "src/translator/parsing/parser.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1016 "src/translator/parsing/parser.mly"
      ( node (FieldAccess (_1, _3)) )
# 3693 "src/translator/parsing/parser.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1021 "src/translator/parsing/parser.mly"
      ( node (Identifier _1) )
# 3700 "src/translator/parsing/parser.ml"
               : 'component_reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'array_subscripts) in
    Obj.repr(
# 1023 "src/translator/parsing/parser.mly"
      ( node (IndexedAccess (rhs_nodes 1 1 (Identifier _1), _2)) )
# 3708 "src/translator/parsing/parser.ml"
               : 'component_reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1025 "src/translator/parsing/parser.mly"
      ( node (FieldAccess (_1, _3)) )
# 3716 "src/translator/parsing/parser.ml"
               : 'component_reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'component_reference) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'array_subscripts) in
    Obj.repr(
# 1027 "src/translator/parsing/parser.mly"
      ( node (IndexedAccess (rhs_nodes 1 3 (FieldAccess (_1, _3)), _4)) )
# 3725 "src/translator/parsing/parser.ml"
               : 'component_reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_arguments_elements) in
    Obj.repr(
# 1032 "src/translator/parsing/parser.mly"
      ( node (ArgumentList (List.rev _1)) )
# 3732 "src/translator/parsing/parser.ml"
               : 'function_arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'for_indices) in
    Obj.repr(
# 1034 "src/translator/parsing/parser.mly"
      ( node (Reduction (_1, _3)) )
# 3740 "src/translator/parsing/parser.ml"
               : 'function_arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1039 "src/translator/parsing/parser.mly"
      ( [node (Argument _1)] )
# 3747 "src/translator/parsing/parser.ml"
               : 'function_arguments_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'named_argument) in
    Obj.repr(
# 1041 "src/translator/parsing/parser.mly"
      ( [_1] )
# 3754 "src/translator/parsing/parser.ml"
               : 'function_arguments_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'function_arguments_elements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1043 "src/translator/parsing/parser.mly"
      ( node (Argument _3) :: _1 )
# 3762 "src/translator/parsing/parser.ml"
               : 'function_arguments_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'function_arguments_elements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'named_argument) in
    Obj.repr(
# 1045 "src/translator/parsing/parser.mly"
      ( _3 :: _1 )
# 3770 "src/translator/parsing/parser.ml"
               : 'function_arguments_elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1050 "src/translator/parsing/parser.mly"
      ( node (NamedArgument (_1, _3)) )
# 3778 "src/translator/parsing/parser.ml"
               : 'named_argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1052 "src/translator/parsing/parser.mly"
      ( failwith "Not yet implemented" )
# 3785 "src/translator/parsing/parser.ml"
               : 'named_argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 1054 "src/translator/parsing/parser.mly"
      ( failwith "Not yet implemented" )
# 3792 "src/translator/parsing/parser.ml"
               : 'named_argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 1056 "src/translator/parsing/parser.mly"
      ( failwith "Not yet implemented" )
# 3800 "src/translator/parsing/parser.ml"
               : 'named_argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'function_arguments) in
    Obj.repr(
# 1058 "src/translator/parsing/parser.mly"
      ( unclosed  "(" 3 ")" 5 )
# 3808 "src/translator/parsing/parser.ml"
               : 'named_argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 1060 "src/translator/parsing/parser.mly"
      ( unclosed  "(" 3 ")" 4 )
# 3815 "src/translator/parsing/parser.ml"
               : 'named_argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1065 "src/translator/parsing/parser.mly"
      ( [_1] )
# 3822 "src/translator/parsing/parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 1067 "src/translator/parsing/parser.mly"
      ( _1 :: _3 )
# 3830 "src/translator/parsing/parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'subscripts) in
    Obj.repr(
# 1072 "src/translator/parsing/parser.mly"
      ( node (Subscripts _2) )
# 3837 "src/translator/parsing/parser.ml"
               : 'array_subscripts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'subscript) in
    Obj.repr(
# 1077 "src/translator/parsing/parser.mly"
      ( [_1] )
# 3844 "src/translator/parsing/parser.ml"
               : 'subscripts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'subscript) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'subscripts) in
    Obj.repr(
# 1079 "src/translator/parsing/parser.mly"
      ( _1 :: _3 )
# 3852 "src/translator/parsing/parser.ml"
               : 'subscripts))
; (fun __caml_parser_env ->
    Obj.repr(
# 1084 "src/translator/parsing/parser.mly"
      ( node Colon )
# 3858 "src/translator/parsing/parser.ml"
               : 'subscript))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 1086 "src/translator/parsing/parser.mly"
      ( node (Subscript _1) )
# 3865 "src/translator/parsing/parser.ml"
               : 'subscript))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'string_comment) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'annotation_option) in
    Obj.repr(
# 1091 "src/translator/parsing/parser.mly"
      ( node (Comment (_1, _2)) )
# 3873 "src/translator/parsing/parser.ml"
               : 'comment))
; (fun __caml_parser_env ->
    Obj.repr(
# 1096 "src/translator/parsing/parser.mly"
      ( [] )
# 3879 "src/translator/parsing/parser.ml"
               : 'string_comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'strings) in
    Obj.repr(
# 1098 "src/translator/parsing/parser.mly"
      ( List.rev _1 )
# 3886 "src/translator/parsing/parser.ml"
               : 'string_comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1103 "src/translator/parsing/parser.mly"
      ( [_1] )
# 3893 "src/translator/parsing/parser.ml"
               : 'strings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'strings) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1105 "src/translator/parsing/parser.mly"
      ( _3 :: _1 )
# 3901 "src/translator/parsing/parser.ml"
               : 'strings))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_modification) in
    Obj.repr(
# 1110 "src/translator/parsing/parser.mly"
      ( node (Annotation _2) )
# 3908 "src/translator/parsing/parser.ml"
               : 'annotation))
(* Entry definition *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let definition (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (location Syntax.toplevel_element_desc, location) Syntax.node)
;;
# 1114 "src/translator/parsing/parser.mly"

let parse filename token_fun lexbuf =
  inputfile := filename;
  try
    definition token_fun lexbuf
  with
    | Unclosed (pos, symbol, pos', symbol') ->
        raise (SyntacticError
          {err_msg = ["_Unclosed"; symbol];
           err_info = [];
           err_ctx =
             {location = {start = pos;
                          enddd = pos';
                          filename = filename}}})
    | Invalid_matrix (pos, pos') ->
        raise (SyntacticError
          {err_msg = ["_InvalidMatrixConstruct"];
           err_info = [];
           err_ctx =
             {location = {start = pos;
                          enddd = pos';
                          filename = filename}}})
    | Invalid_array (pos, pos') ->
        raise (SyntacticError
          {err_msg = ["_InvalidArrayConstruct"];
           err_info = [];
           err_ctx =
             {location = {start = pos;
                          enddd = pos';
                          filename = filename}}})
    | Parsing.Parse_error ->
        raise (SyntacticError
          {err_msg = ["_SyntaxError"];
           err_info = [];
           err_ctx =
             {location = {start = Lexing.lexeme_start lexbuf;
                          enddd = Lexing.lexeme_end lexbuf;
                          filename = filename}}})
# 3972 "src/translator/parsing/parser.ml"
